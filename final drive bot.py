import telebot
import sqlite3

from datetime import datetime, timedelta
from random import randint, random
from telebot import types
from threading import Lock
from yoomoney import Quickpay, Client
from bisect import bisect
from itertools import accumulate
import yoomoney

import cfg

# now = datetime.now()

checker ={}
time_drive = {}
plus_time = {}
stay = {}
user_distanse_show = {}
timer = {}
all_car_tags = {}
all_cars = {}
all_car_tags_shop = {}
all_cars_shop = {}
all_cars_cost = {}
buy_car = {}
car_kol = {}
button_autopark = {}
give_coin = {}
top_list_km = {}
top_list_coin = {}
pr = {}
p = {}
x = {}
y = {}
z = {}
a = {}
b = {}
c = {}
i = {}
all_car_tags_dump = {}
all_cars_dump = {}
all_car_tags_predump = {}
don_tag = {}
don_name = {}
don_cost ={}
feed = {}
prom = {}
quickpay = {}
history = {}
operation = {}
check_don = {}
num_don = {}
pr_store = {}
chance = {}
what_chance = {}
buy_case = {}
all_case_tags = {}
all_case_kol = {}
opencase = {}
casedrop = {}
case_kol = {}


lock = Lock()
client = Client(cfg.don_token)

connection = sqlite3.connect('users_cars_data.db', check_same_thread=False)
cursor = connection.cursor()

cursor.execute('''create table if not exists user_data
(
id integer primary key autoincrement,
user_id integer,
user_name text,
user_distanse integer,
timer time,
all_user_cars text,
user_using_car text,
user_balance integer,
all_using_codes text,
operation_id text,
donation_valute integer,
all_user_buy_actions text,
all_user_cases text,
km_take text
)
''')
connection.commit()

cursor.execute('''create table if not exists chat_id_data
(
id integer primary key autoincrement,
chat_id intager
)
''')
connection.commit()

cursor.execute('''create table if not exists car_balance
(
id integer primary key autoincrement,
car_tag text,
car_name text,
cost integer,
min_step integer,
max_step integer,
kef_coin integer,
check_exclusive integer,
tier integer
)
''')
connection.commit()

cursor.execute('''create table if not exists user_feedback
(
id integer primary key autoincrement,
user_id integer,
user_name text,
user_feed text
)
''')
connection.commit()

cursor.execute('''create table if not exists promo
(
id integer primary key autoincrement,
code text,
what_give integer,
car_give text,
coin_give integer,
case_give text,
activation integer
)
''')
connection.commit()

cursor.execute('''create table if not exists logs
(
id integer primary key autoincrement,
first_name text,
username text,
user_id integer,
chat_id integer,
time text,
command text,
logs text
)
''')
connection.commit()

cursor.execute('''create table if not exists donate
(
id integer primary key autoincrement,
cost integer,
give integer
)
''')
connection.commit()


cursor.execute('''create table if not exists store
(
id integer primary key autoincrement,
pack_tag text,
pack_name text,
cost integer,
what_give integer,
car_give text,
coin_give integer,
case_give text
)
''')
connection.commit()

cursor.execute('''create table if not exists cases
(
id integer primary key autoincrement,
case_tag text,
case_name text,
cost integer,
all_cars text,
cars_chance text,
all_coins text,
coins_chance text,
all_valutes text,
valutes_chance text,
checker integer
)
''')
connection.commit()

cursor.execute('''create table if not exists km_way
(
id integer primary key autoincrement,
km_given integer,
cars text,
coins integer,
valutes integer,
cases text
)
''')
connection.commit()

def minto(stay):
    if stay%10 == 1 and stay != 11:
        min_to = '–º–∏–Ω—É—Ç—É'
    elif stay%10 >= 2 and stay%10 <= 4 and (stay < 12 or stay > 14):
        min_to = '–º–∏–Ω—É—Ç—ã'
    else:
        min_to = '–º–∏–Ω—É—Ç'
    return min_to

def hourto(stay):
    if stay == 1 or stay == 21:
        hour_to = '—á–∞—Å'
    elif (stay >= 2 and stay <= 4) or (stay >= 21 and stay <= 24):
        hour_to = '—á–∞—Å–∞'
    else:
        hour_to = '—á–∞—Å–æ–≤'
    return hour_to

def cointo(stay):
    if stay%10 == 1  and stay%100 != 11:
        coin_to = '–∫–æ–∏–Ω'
    elif stay%10 >= 2 and stay%10 <= 4 and (stay%100 < 12 or stay%100 > 14):
        coin_to = '–∫–æ–∏–Ω–∞'
    else:
        coin_to = '–∫–æ–∏–Ω–æ–≤'
    return coin_to

def creditto(stay):
    if stay%10 == 1  and stay%100 != 11:
        credit_to = '–∫—Ä–µ–¥–∏—Ç'
    elif stay%10 >= 2 and stay%10 <= 4 and (stay%100 < 12 or stay%100 > 14):
        credit_to = '–∫—Ä–µ–¥–∏—Ç–∞'
    else:
        credit_to = '–∫—Ä–µ–¥–∏—Ç–æ–≤'
    return credit_to

def caseto(stay):
    if stay%10 == 1  and stay%100 != 11:
        case_to = '–∫–µ–π—Å'
    elif stay%10 >= 2 and stay%10 <= 4 and (stay%100 < 12 or stay%100 > 14):
        case_to = '–∫–µ–π—Å–∞'
    else:
        case_to = '–∫–µ–π—Å–æ–≤'
    return case_to

def check(message):
    cursor.execute(f'''select * from user_data
    where user_id = {message.from_user.id}''')
    x[message.from_user.id] = cursor.fetchall()
    if len(x[message.from_user.id]) == 0:
        cursor.execute(f'insert into user_data(user_id, user_name, user_distanse, timer, all_user_cars, user_using_car, user_balance, all_using_codes, operation_id, donation_valute, all_user_buy_actions, all_user_cases, km_take) values({message.from_user.id}, "{message.from_user.first_name}", 0, "{datetime.now()}", "legs", "legs", 0, "", "", 0, "", "", "")')
        connection.commit()
        cursor.execute(f'insert into logs(first_name, username, user_id, chat_id, time, command, logs) values("{message.from_user.first_name}", "{message.from_user.username}", {message.from_user.id}, {message.chat.id}, "{datetime.now()}", "new","first_use")')
        connection.commit()
    elif x[message.from_user.id][0][2] != message.from_user.first_name:
        cursor.execute(f'''update user_data
        set user_name = "{message.from_user.first_name}"
        where user_id = {message.from_user.id}''')

    cursor.execute(f'''select * from chat_id_data
    where chat_id = {message.chat.id}''')
    y[message.from_user.id] = cursor.fetchall()
    if len(y[message.from_user.id]) == 0:
        cursor.execute(f'insert into chat_id_data(chat_id) values({message.chat.id})')
        connection.commit()
        cursor.execute(f'insert into logs(first_name, username, user_id, chat_id, time, command, logs) values("{message.from_user.first_name}", "{message.from_user.username}", {message.from_user.id}, {message.chat.id}, "{datetime.now()}", "new", "chat")')


bot = telebot.TeleBot(cfg.token)

@bot.message_handler(commands=['start'])

def start(message):
    lock.acquire()

    check(message)
    cursor.execute(f'insert into logs(first_name, username, user_id, chat_id, time, command, logs) values("{message.from_user.first_name}", "{message.from_user.username}", {message.from_user.id}, {message.chat.id}, "{datetime.now()}", "use", "start")')
    connection.commit()

    bot.reply_to(message, '''<b><i>–ü—Ä–∏–≤–µ—Ç!</i> <u>–≠—Ç–æ KmDrivebot</u> üëã.
    \n<i>–û—Ç–ø—Ä–∞–≤–ª—è–π –∫–æ–º–∞–Ω–¥—É /drive, —Å–æ—Ä–µ–≤–Ω—É–π—Å—è —Å –¥—Ä—É–≥–∏–º–∏, –ø–æ–ø–∞–¥–∞–π –≤ —Ç–æ–ø, –ø–æ–ª—É—á–∞–π –ø—Ä–∏–∑—ã! üéÅ
    \n–ü–æ–∫—É–ø–∞–π –∫—Ä—É—Ç—ã–µ —Ç–∞—á–∫–∏ /shop</i> üî•</b>
    \n<u><i>–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ? –¢–µ–±–µ –ø–æ–º–æ–∂–µ—Ç /help –∏–ª–∏ /aboutus</i></u> ü§ù''' ,parse_mode = 'html')

    lock.release()

@bot.message_handler(commands=['aboutus'])

def aboutus(message):
    lock.acquire()

    check(message)
    cursor.execute(f'insert into logs(first_name, username, user_id, chat_id, time, command, logs) values("{message.from_user.first_name}", "{message.from_user.username}", {message.from_user.id}, {message.chat.id}, "{datetime.now()}", "use", "aboutus")')
    connection.commit()


    bot.reply_to(message, '''<i><b>–ú—ã –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ KmDriveBot!</b></i>
    \n<b>–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –∑–∞–Ω—è–ª–∞ –æ–∫–æ–ª–æ —Ç—Ä–µ—Ö –º–µ—Å—è—Ü–æ–≤ üèûÔ∏è</b>
    \n<i>–ü–µ—Ä–µ–¥ –Ω–∞–º–∏ —Å—Ç–æ—è–ª–∞ <u>—Ü–µ–ª—å</u>, —Å–æ–∑–¥–∞—Ç—å <u>—á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ</u>, —á–µ–≥–æ –≤—ã –µ—â–µ –Ω–µ –≤–∏–¥–µ–ª–∏, —á—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç <u>—Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç—å—Å—è</u> –º–µ–∂–¥—É —Å–æ–±–æ–π. –ù–∞–¥–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å, –≤—Å–µ –∂–µ –º—ã <u>–æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã</u> —Ä–∞–º–∫–∞–º–∏ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞, –Ω–æ —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é –º–æ–≥—É –∑–∞—è–≤–∏—Ç—å, —É –Ω–∞—Å –ø–æ–ª—É—á–∏–ª–æ—Å—å! ‚úÖ</i>
    \n<i>–ú—ã —Å—Ç–∞—Ä–∞–ª–∏—Å—å —É—á–∏—Ç—ã–≤–∞—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è <u>–∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</u>, —É—á–∞—Å—Ç–≤—É—é—â–µ–≥–æ –≤ –±–µ—Ç–∞-—Ç–µ—Å—Ç–µ –±–æ—Ç–∞, –ø–µ—Ä–≤–∞—è –∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è</i> ü§ó 
    \n<i>–°—Ç–æ–∏—Ç —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ —É –Ω–∞—Å <u>–Ω–µ—Ç, –Ω–µ –±—ã–ª–æ, –∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±—É–¥–µ—Ç</u> —Ü–µ–ª–∏ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –¥–µ–Ω–µ–∂–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø—Ä–∏ –ø–æ–º–æ—â–∏ KmDriveBot. –≠—Ç–æ <u>–Ω–µ–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π –ø—Ä–æ–µ–∫—Ç</u> üö´</i>
    \n<i>–ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–Ω–∞—Ç–∞, –º—ã —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞ <u>–ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ò–°–ö–õ–Æ–ß–ò–¢–ï–õ–¨–ù–û –¥–ª—è –ü–û–î–î–ï–†–ñ–ê–ù–ò–Ø —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∞</u></i>üîí
    \n<u>–°–ø–∞—Å–∏–±–æ! –ù–∞–¥–µ–µ–º—Å—è –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è –∏–ª–∏ —É–∂–µ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è KmDriveBotüèé</u>
    \n<i><span class="tg-spoiler">–ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø–æ–≤–æ–¥—É —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –ø–∏—à–∏—Ç–µ (/feedback –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏—è). –ü–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –±—É–¥–µ–º —Å—Ç–∞—Ä–∞—Ç—å—Å—è –æ—Ç–≤–µ—á–∞—Ç—å!‚è∞</span></i>  ''', parse_mode = 'html')

    lock.release()

@bot.message_handler(commands=['stickers'])

def stickers(message):
    lock.acquire()

    check(message)
    cursor.execute(f'insert into logs(first_name, username, user_id, chat_id, time, command, logs) values("{message.from_user.first_name}", "{message.from_user.username}", {message.from_user.id}, {message.chat.id}, "{datetime.now()}", "use", "stickers")')
    connection.commit()

    bot.reply_to(message, '''<i><b>–°—Ç–∏–∫–µ—Ä—ã KmDriveBot!</b></i>üí•
    \n<b>–î–æ–±–∞–≤–ª—è–π —Å—Ç–∏–∫–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Å–≤—è—â–µ–Ω—ã —Ä–∞–∑–ª–∏—á–Ω—ã–º —Å–∏—Ç—É–∞—Ü–∏—è–º –≤ –∏–≥—Ä–µ üèûÔ∏è</b>
    \n<i>–¢–µ–ø–µ—Ä—å –≤—ã—Ä–∞–∂–∞—Ç—å —Å–≤–æ–∏ —ç–º–æ—Ü–∏–∏ —Å—Ç–∞–Ω–µ—Ç –ì–û–†–ê–ó–î–û –ø—Ä–æ—â–µ </i>ü§ó 
    \n<i>–ò—Å–ø–æ–ª—å–∑—É–π –∏—Ö, –∏ –Ω–∞–π–¥–∏ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–º–æ(–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ, —É—Å–ø–µ–≤–∞–π)</i> üîí
    \n<u>–£–¥–∞—á–∏!</u>üçÄ
t.me/addstickers/kmdrivebot

<span class="tg-spoiler"><i><b>P.S –° —Ä–∞–¥–æ—Å—Ç—å—é –ø—Ä–∏–º–µ–º –≤–æ –≤–Ω–∏–º–∞–Ω–∏–µ, –≤–∞—à–∏ –∏–¥–µ–∏, –∫–∞–∫–∏–µ –µ—â–µ —Å—Ç–∏–∫–µ—Ä—ã –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å. –í—ã –∑–Ω–∞–µ—Ç–µ –∫—É–¥–∞ –ø–∏—Å–∞—Ç—å /feedback üí¨</b></i></span>''', parse_mode = 'html') 

    lock.release()



@bot.message_handler(commands=['help'])

def help1(message):
    lock.acquire()

    check(message)
    cursor.execute(f'insert into logs(first_name, username, user_id, chat_id, time, command, logs) values("{message.from_user.first_name}", "{message.from_user.username}", {message.from_user.id}, {message.chat.id}, "{datetime.now()}", "use", "help")')
    connection.commit()
    
    murkup = types.InlineKeyboardMarkup(row_width=1)
    info1 = types.InlineKeyboardButton('–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µüîù', callback_data=str(message.from_user.id)+'info1')

    murkup.add(info1)
    bot.reply_to(message, '''<u>–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã</u>ü§ì
    
    \n<b><i>–í—Å–µ –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—É—Ç /commands üí¨ 
    \n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –∞–≤—Ç–æ, –∫—Ä–µ–¥–∏—Ç—ã (–¥–æ–Ω–∞—Ç-–≤–∞–ª—é—Ç–∞), –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ, —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π /trophyroad ‚ö° 
    \n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ—é <u>—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É</u> –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /myway</i></b>üöÄ''' , parse_mode = 'html', reply_markup=murkup)

    lock.release()



@bot.message_handler(commands=['commands'])

def commands(message):
    lock.acquire()

    check(message)
    cursor.execute(f'insert into logs(first_name, username, user_id, chat_id, time, command, logs) values("{message.from_user.first_name}", "{message.from_user.username}", {message.from_user.id}, {message.chat.id}, "{datetime.now()}", "use", "commands")')
    connection.commit()


    bot.reply_to(message,'''<b>–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ üóí 
    \n<i>/start - –∑–∞–ø—É—Å–∫ –¥–≤–∏–≥–∞—Ç–µ–ª—è
    \n/help - –ø–æ–º–æ—â—å 
    \n/drive - –Ω–∞—á–∏–Ω–∞–π –∑–∞–µ–∑–¥ 
    \n/myway - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ 
    \n/shop - –º–∞–≥–∞–∑–∏–Ω 
    \n/donate - –¥–æ–Ω–∞—Ç 
    \n/store - –¥–æ–Ω–∞—Ç-–º–∞–≥–∞–∑–∏–Ω  
    \n/cases - –≤–∞—à–∏ –∫–µ–π—Å—ã 
    \n/trophyroad - –ø—É—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π 
    \n/autopark - –≤–∞—à –∞–≤—Ç–æ–ø–∞—Ä–∫ 
    \n/top - —Ç–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ 
    \n/cardump - —Å–≤–∞–ª–∫–∞ –∞–≤—Ç–æ 
    \n/promo - –ø—Ä–æ–º–æ–∫–æ–¥—ã 
    \n/feedback - –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã</i> </b>''', parse_mode = 'html')

    lock.release()

@bot.message_handler(commands=['promo'])

def promo(message):
    lock.acquire()

    check(message)
    cursor.execute(f'insert into logs(first_name, username, user_id, chat_id, time, command, logs) values("{message.from_user.first_name}", "{message.from_user.username}", {message.from_user.id}, {message.chat.id}, "{datetime.now()}", "use", "promo")')
    connection.commit()

    bot.reply_to(message, '''<u><b>–ü—Ä–æ–º–æ–∫–æ–¥—ã - —ç—Ç–æ –Ω–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∏—Ç—å –∞–≤—Ç–æ –∏–ª–∏ –≤–∞–ª—é—Ç—É</b></u> üí∞
    \n<i>–û—Ç–ø—Ä–∞–≤–ª—è–π –∫–æ–º–∞–Ω–¥—É 
/promo_–ø—Ä–æ–º–æ–∫–æ–¥ –∏ –ø–æ–ª—É—á–∞–π –ø—Ä–∏–∑—ã!üî•
    \n<span class="tg-spoiler">P.S –ü—Ä–æ–º–æ–∫–æ–¥ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º ü§´</span></i>''', parse_mode = 'html')


    lock.release()

@bot.message_handler(commands=['drive'])

def drive(message):
    lock.acquire()

    check(message)
    cursor.execute(f'insert into logs(first_name, username, user_id, chat_id, time, command, logs) values("{message.from_user.first_name}", "{message.from_user.username}", {message.from_user.id}, {message.chat.id}, "{datetime.now()}", "use", "drive")')
    connection.commit()

    cursor.execute(f'''select timer from user_data
    where user_id = {message.from_user.id}''')
    x[message.from_user.id] = cursor.fetchall()
    timer[message.from_user.id] = x[message.from_user.id][0][0]
    if datetime.strptime(timer[message.from_user.id], '%Y-%m-%d %H:%M:%S.%f') <= datetime.now():
            
        cursor.execute(f'''select user_using_car, user_balance, user_distanse from user_data
        where user_id = {message.from_user.id}
        ''')
        x[message.from_user.id] = cursor.fetchall()

        cursor.execute(f'''select min_step, max_step, kef_coin, check_exclusive from car_balance
        where car_tag = "{x[message.from_user.id][0][0]}"''')
        y[message.from_user.id] = cursor.fetchall()

        time_drive[message.from_user.id] = randint(y[message.from_user.id][0][0], y[message.from_user.id][0][1])

        if time_drive[message.from_user.id] <= 0:
            give_coin[message.from_user.id] = 0
        else:
            give_coin[message.from_user.id] = time_drive[message.from_user.id] * y[message.from_user.id][0][2]

        if y[message.from_user.id][0][3] == 1:
            plus_time[message.from_user.id] = 6
        elif y[message.from_user.id][0][3] == 3 or y[message.from_user.id][0][3] == 4:
            plus_time[message.from_user.id] = 2
        else:
            plus_time[message.from_user.id] = 3
        # plus_time[message.from_user.id] = 0.00028

        cursor.execute(f'''update user_data
        set user_distanse = {x[message.from_user.id][0][2] + time_drive[message.from_user.id]},
        timer = "{datetime.now() + timedelta(hours=plus_time[message.from_user.id])}",
        user_balance = {x[message.from_user.id][0][1] + give_coin[message.from_user.id]}
        where user_id = {message.from_user.id}
        ''')
        connection.commit()

        user_distanse_show[message.from_user.id] = x[message.from_user.id][0][2]

        bot.reply_to(message, f'''<u>–¢—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø—Ä–æ–µ—Ö–∞–ª</u> <b>{time_drive[message.from_user.id]} –∫–º üèé \n–¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª {give_coin[message.from_user.id]} {cointo(give_coin[message.from_user.id])} ü§ë
        \n<i>–¢—ã –≤—Å–µ–≥–æ –ø—Ä–æ–µ—Ö–∞–ª</i> <b>{user_distanse_show[message.from_user.id] + time_drive[message.from_user.id]}–∫–º üåá</b> \n–°–ª–µ–¥—É—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {plus_time[message.from_user.id]} {hourto(plus_time[message.from_user.id])}</b>‚è±''', parse_mode='html')

        cursor.execute(f'insert into logs(first_name, username, user_id, chat_id, time, command, logs) values("{message.from_user.first_name}", "{message.from_user.username}", {message.from_user.id}, {message.chat.id}, "{datetime.now()}", "drive", "take {time_drive[message.from_user.id]} km {give_coin[message.from_user.id]} c")')
        connection.commit()

        cursor.execute(f'''select km_given, cars, coins, valutes, cases from km_way
        where km_given <= {user_distanse_show[message.from_user.id] + time_drive[message.from_user.id]}
        order by km_given''')
        a[message.from_user.id] = cursor.fetchall()

        cursor.execute(f'''select km_take from user_data
        where user_id = {message.from_user.id}''')
        b[message.from_user.id] = cursor.fetchall()

        for i[message.from_user.id] in a[message.from_user.id]:
            if not str(i[message.from_user.id][0]) in b[message.from_user.id][0][0].split():
                cursor.execute(f'''select km_take, all_user_cars, user_balance, donation_valute, all_user_cases from user_data
                where user_id = {message.from_user.id}''')
                b[message.from_user.id] = cursor.fetchall()
                p[message.from_user.id] = ''
                
                if not i[message.from_user.id][1] is None:
                    cursor.execute(f'''update user_data
                    set all_user_cars = "{b[message.from_user.id][0][1]+' '+i[message.from_user.id][1]}"
                    where user_id = {message.from_user.id}''')
                    connection.commit()

                    cursor.execute(f'''select car_name from car_balance
                    where car_tag = "{i[message.from_user.id][1]}"''')
                    c[message.from_user.id] = cursor.fetchall()

                    p[message.from_user.id] += f'–∞–≤—Ç–æ <b>{c[message.from_user.id][0][0]}</b>'

                if not i[message.from_user.id][2] is None:
                    cursor.execute(f'''update user_data
                    set user_balance = {b[message.from_user.id][0][2]+i[message.from_user.id][2]}
                    where user_id = {message.from_user.id}''')
                    connection.commit()

                    if p[message.from_user.id] != '':
                        if i[message.from_user.id][3] is None and i[message.from_user.id][4] is None:
                            p[message.from_user.id] += ' –∏ '
                        else:
                            p[message.from_user.id] += ', '
                    p[message.from_user.id] += f'<i>{i[message.from_user.id][2]} {cointo(i[message.from_user.id][2])}</i>'

                if not i[message.from_user.id][3] is None:
                    cursor.execute(f'''update user_data
                    set donation_valute = {b[message.from_user.id][0][3]+i[message.from_user.id][3]}
                    where user_id = {message.from_user.id}''')
                    connection.commit()

                    if p[message.from_user.id] != '': 
                        if i[message.from_user.id][4] is None:
                            p[message.from_user.id] += ' –∏ '
                        else:
                            p[message.from_user.id] += ', '
                    p[message.from_user.id] += f'<i>{i[message.from_user.id][3]} {creditto(i[message.from_user.id][3])}</i>'

                if not i[message.from_user.id][4] is None:
                    if i[message.from_user.id][4]+'+' in b[message.from_user.id][0][4]:
                        all_case_tags[message.from_user.id] = b[message.from_user.id][0][4].split()

                        for c[message.from_user.id] in range(len(all_case_tags[message.from_user.id])):
                            if all_case_tags[message.from_user.id][c[message.from_user.id]].split('+')[0] == i[message.from_user.id][4]:
                                all_case_tags[message.from_user.id][c[message.from_user.id]] = all_case_tags[message.from_user.id][c[message.from_user.id]].split('+')[0]+'+'+str(int(all_case_tags[message.from_user.id][c[message.from_user.id]].split('+')[1])+1)
                                break

                        cursor.execute(f'''update user_data
                        set all_user_cases = "{' '.join(all_case_tags[message.from_user.id])}"
                        where user_id = {message.from_user.id}''')
                        connection.commit()

                    else:        
                        cursor.execute(f'''update user_data
                        set all_user_cases = "{b[message.from_user.id][0][4]+' '+i[message.from_user.id][4]+'+1'}"
                        where user_id = {message.from_user.id}''')
                        connection.commit()
                    
                    if p[message.from_user.id] != '':
                        p[message.from_user.id] += ' –∏ '
                    
                    cursor.execute(f'''select case_name from cases
                    where case_tag = "{i[message.from_user.id][4]}"''')
                    c[message.from_user.id] = cursor.fetchall()
                    p[message.from_user.id] += f'–∫–µ–π—Å <b>{c[message.from_user.id][0][0]}</b>'

                cursor.execute(f'''update user_data
                set km_take = "{b[message.from_user.id][0][0]+' '+str(i[message.from_user.id][0])}"
                where user_id = {message.from_user.id}''')
                connection.commit()

                bot.reply_to(message, f'''<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b> 
–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ <b>{i[message.from_user.id][0]}</b>–∫–º ‚úÖ
\n–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ {p[message.from_user.id]} üéÅ''', parse_mode='html')
                
                cursor.execute(f'insert into logs(first_name, username, user_id, chat_id, time, command, logs) values("{message.from_user.first_name}", "{message.from_user.username}", {message.from_user.id}, {message.chat.id}, "{datetime.now()}", "exclusive", "take {i[message.from_user.id][0]}km")')
                connection.commit()        

    else:
        stay[message.from_user.id] = datetime.strptime(timer[message.from_user.id], '%Y-%m-%d %H:%M:%S.%f') - datetime.now()
        if stay[message.from_user.id].seconds//3600 == 0 and stay[message.from_user.id].seconds%3600//60 == 0:
            z[message.from_user.id] = '<b>–Ω–µ—Å–∫–æ–ª—å–∫–æ</b> —Å–µ–∫—É–Ω–¥'
        elif stay[message.from_user.id].seconds//3600 == 0:
            z[message.from_user.id] = f'<b>{stay[message.from_user.id].seconds%3600//60}</b> {minto(stay[message.from_user.id].seconds%3600//60)}'
        elif stay[message.from_user.id].seconds%3600//60 == 0:
            z[message.from_user.id] = f'<b>{stay[message.from_user.id].seconds//3600}</b> {hourto(stay[message.from_user.id].seconds//3600)}'
        else:
            z[message.from_user.id] = f'<b>{stay[message.from_user.id].seconds//3600}</b> {hourto(stay[message.from_user.id].seconds//3600)} <b>{stay[message.from_user.id].seconds%3600//60}</b> {minto(stay[message.from_user.id].seconds%3600//60)}'
        bot.reply_to(message, f'<u>–í—ã –Ω–∞ –∑–∞–ø—Ä–∞–≤–∫–µ ‚õΩ</u> \n–°–ª–µ–¥—É—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {z[message.from_user.id]}‚è±', parse_mode='html')

    lock.release()


@bot.message_handler(commands=['myway'])

def myway(message):
    lock.acquire()

    check(message)
    cursor.execute(f'insert into logs(first_name, username, user_id, chat_id, time, command, logs) values("{message.from_user.first_name}", "{message.from_user.username}", {message.from_user.id}, {message.chat.id}, "{datetime.now()}", "use", "myway")')
    connection.commit()

    cursor.execute(f'''select user_distanse, user_balance, all_user_cars, user_using_car, donation_valute from user_data
    where user_id = {message.from_user.id}''')
    x[message.from_user.id] = cursor.fetchall()
    
    cursor.execute(f'''select car_name from car_balance
    where car_tag = "{x[message.from_user.id][0][3]}"''')
    y[message.from_user.id] = cursor.fetchall()

    bot.reply_to(message, f'<i>–í—ã –ø—Ä–æ–µ—Ö–∞–ª–∏ –≤—Å–µ–≥–æ</i> - <b>{x[message.from_user.id][0][0]} –∫–º üèñ</b> \n<i>–í–∞—à –±–∞–ª–∞–Ω—Å</i> - <b>{x[message.from_user.id][0][1]} {cointo(x[message.from_user.id][0][1])} –∏ {x[message.from_user.id][0][4]} {creditto(x[message.from_user.id][0][4])}üí∞</b> \n<i>–£ –≤–∞—Å –≤ –≥–∞—Ä–∞–∂–µ</i> - <b>{len(x[message.from_user.id][0][2].split())}</b> –∞–≤—Ç–æ üè¶ \n<i>–ê–∫—Ç–∏–≤–Ω–æ–µ –∞–≤—Ç–æ</i> -  <b>{y[message.from_user.id][0][0]}</b> üö¶', parse_mode='html')

    lock.release()

@bot.message_handler(commands=['top'])

def top(message):
    lock.acquire()

    check(message)
    cursor.execute(f'insert into logs(first_name, username, user_id, chat_id, time, command, logs) values("{message.from_user.first_name}", "{message.from_user.username}", {message.from_user.id}, {message.chat.id}, "{datetime.now()}", "use", "top")')
    connection.commit()

    cursor.execute('''select user_name, user_distanse from user_data
    order by user_distanse desc
    limit 5
    ''')
    x[message.from_user.id] = cursor.fetchall()

    top_list_km[message.from_user.id] = ''
    for i[message.from_user.id] in range(1, len(x[message.from_user.id])+1):
        top_list_km[message.from_user.id] += f'\n{i[message.from_user.id]}. {x[message.from_user.id][i[message.from_user.id]-1][0]} - {x[message.from_user.id][i[message.from_user.id]-1][1]} –∫–º'

    cursor.execute('''select user_name, user_balance from user_data
    order by user_balance desc
    limit 5
    ''')
    y[message.from_user.id] = cursor.fetchall()

    top_list_coin[message.from_user.id] = ''
    for i[message.from_user.id] in range(1, len(y[message.from_user.id])+1):
        top_list_coin[message.from_user.id] += f'\n{i[message.from_user.id]}. {y[message.from_user.id][i[message.from_user.id]-1][0]} - {y[message.from_user.id][i[message.from_user.id]-1][1]} {cointo(y[message.from_user.id][i[message.from_user.id]-1][1])}'


    bot.reply_to(message, f'<b>–¢–æ–ø 5 –ø–æ –∫–º üëë</b> {top_list_km[message.from_user.id]} \n \n<b>–¢–æ–ø 5 –ø–æ –∫–æ–∏–Ω–∞–º üëë</b> {top_list_coin[message.from_user.id]}', parse_mode='html')

    lock.release()

@bot.message_handler(commands=['autopark'])

def autopark(message):
    lock.acquire()

    check(message)
    cursor.execute(f'insert into logs(first_name, username, user_id, chat_id, time, command, logs) values("{message.from_user.first_name}", "{message.from_user.username}", {message.from_user.id}, {message.chat.id}, "{datetime.now()}", "use", "autopark")')
    connection.commit()

    murkup = types.InlineKeyboardMarkup(row_width=1)
    legs = types.InlineKeyboardButton('–ù–æ–≥–∏ üë£', callback_data=str(message.from_user.id)+'legs'+'garage')
    shoper = types.InlineKeyboardButton('–ü–æ–∫—É–ø–Ω—ã–µ üõû', callback_data=str(message.from_user.id)+'shoper')
    exclusiver = types.InlineKeyboardButton('–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ ‚ú®', callback_data=str(message.from_user.id)+'exclusiver')
    secreter = types.InlineKeyboardButton('–°–µ–∫—Ä–µ—Ç–Ω—ã–µ üîÆ', callback_data=str(message.from_user.id)+'secreter')
    donater = types.InlineKeyboardButton('–î–æ–Ω–∞—Ç–Ω—ã–µ üíé', callback_data=str(message.from_user.id)+'donater')
    cancel = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞‚ùå', callback_data=str(message.from_user.id)+'cancelgarage')

    murkup.add(legs, shoper, exclusiver, secreter, donater, cancel)

    bot.reply_to(message, '<i>–í–∞—à –∞–≤—Ç–æ–ø–∞—Ä–∫ üÖø</i>', parse_mode='html' ,reply_markup=murkup)

    lock.release()

@bot.message_handler(commands=['cases'])

def cases(message):
    lock.acquire()

    check(message)
    cursor.execute(f'insert into logs(first_name, username, user_id, chat_id, time, command, logs) values("{message.from_user.first_name}", "{message.from_user.username}", {message.from_user.id}, {message.chat.id}, "{datetime.now()}", "use", "cases")')

    murkup = types.InlineKeyboardMarkup(row_width=1)
    cancel = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞ ‚ùå', callback_data=str(message.from_user.id)+'cancelcase')

    cursor.execute(f'''select all_user_cases from user_data
    where user_id = {message.from_user.id}''')
    x[message.from_user.id] = cursor.fetchall()

    a[message.from_user.id] = x[message.from_user.id][0][0].split()
    all_case_tags[message.from_user.id] = []
    all_case_kol[message.from_user.id] = []
    for i[message.from_user.id] in a[message.from_user.id]:
        all_case_tags[message.from_user.id].append(i[message.from_user.id].split('+')[0])
        all_case_kol[message.from_user.id].append(i[message.from_user.id].split('+')[1])
    if len(all_case_tags[message.from_user.id]) == 0:
        bot.reply_to(message, '<i>–£ –≤–∞—Å –Ω–µ—Ç –∫–µ–π—Å–æ–≤ üö´</i>', parse_mode='html' ,reply_markup=murkup)
    else:
        for i[message.from_user.id] in range(len(all_case_tags[message.from_user.id])):
            cursor.execute(f'''select case_name from cases
            where case_tag = "{all_case_tags[message.from_user.id][i[message.from_user.id]]}"''')
            y[message.from_user.id] = cursor.fetchall()

            murkup.add(types.InlineKeyboardButton(f'{y[message.from_user.id][0][0]} X{all_case_kol[message.from_user.id][i[message.from_user.id]]}', callback_data=str(message.from_user.id)+all_case_tags[message.from_user.id][i[message.from_user.id]]+'caseselect'))
        murkup.add(cancel)

        bot.reply_to(message, '<i>–í—Å–µ –≤–∞—à–∏ –∫–µ–π—Å—ã üß∞</i>', parse_mode='html' ,reply_markup=murkup)

    lock.release()



@bot.message_handler(commands=['shop'])

def shop(message):
    lock.acquire()

    check(message)
    cursor.execute(f'insert into logs(first_name, username, user_id, chat_id, time, command, logs) values("{message.from_user.first_name}", "{message.from_user.username}", {message.from_user.id}, {message.chat.id}, "{datetime.now()}", "use", "shop")')
    connection.commit()

    murkup = types.InlineKeyboardMarkup(row_width=1)
    cars = types.InlineKeyboardButton('–ú–∞—à–∏–Ω—ã üèé', callback_data=str(message.from_user.id)+'carssshop')
    cases = types.InlineKeyboardButton('–ö–µ–π—Å—ã üß∞', callback_data=str(message.from_user.id)+'casesshop')
    cancel = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞ ‚ùå', callback_data=str(message.from_user.id)+'cancelshop')

    murkup.add(cars, cases, cancel)

    bot.reply_to(message, '<i>–ú–∞–≥–∞–∑–∏–Ω üõí</i>', parse_mode='html' ,reply_markup=murkup)

    lock.release()



@bot.message_handler(commands=['trophyroad'])

def trophyroad(message):
    lock.acquire()

    check(message)
    cursor.execute(f'insert into logs(first_name, username, user_id, chat_id, time, command, logs) values("{message.from_user.first_name}", "{message.from_user.username}", {message.from_user.id}, {message.chat.id}, "{datetime.now()}", "use", "trophyroad")')
    connection.commit()

    cursor.execute('''select km_given, cars, coins, valutes, cases from km_way
    order by km_given''')
    x[message.from_user.id] = cursor.fetchall()

    cursor.execute(f'''select km_take from user_data
    where user_id = "{message.from_user.id}"''')
    y[message.from_user.id] = cursor.fetchall()

    p[message.from_user.id] = ''
    for i[message.from_user.id] in x[message.from_user.id]:
        pr[message.from_user.id] = ''

        if not i[message.from_user.id][1] is None:
            cursor.execute(f'''select car_name from car_balance
            where car_tag = "{i[message.from_user.id][1]}"''')
            a[message.from_user.id] = cursor.fetchall()

            pr[message.from_user.id] += f'–∞–≤—Ç–æ <b>{a[message.from_user.id][0][0]}</b>'
        
        if not i[message.from_user.id][2] is None:
            if pr[message.from_user.id] != '':
                if i[message.from_user.id][3] is None and i[message.from_user.id][4] is None:
                    pr[message.from_user.id] += ' –∏ '
                else:
                    pr[message.from_user.id] += ', '
            pr[message.from_user.id] += f'<i>{i[message.from_user.id][2]} {cointo(i[message.from_user.id][2])}</i>'

        if not i[message.from_user.id][3] is None:
            if pr[message.from_user.id] != '': 
                if i[message.from_user.id][4] is None:
                    pr[message.from_user.id] += ' –∏ '
                else:
                    pr[message.from_user.id] += ', '
            pr[message.from_user.id] += f'<i>{i[message.from_user.id][3]} {creditto(i[message.from_user.id][3])}</i>'

        if not i[message.from_user.id][4] is None:
            cursor.execute(f'''select case_name from cases
            where case_tag = "{i[message.from_user.id][4]}"''')
            b[message.from_user.id] = cursor.fetchall()
            if pr[message.from_user.id] != '':
                pr[message.from_user.id] += ' –∏ '
            pr[message.from_user.id] += f'<b>{b[message.from_user.id][0][0]}</b>'

        if str(i[message.from_user.id][0]) in y[message.from_user.id][0][0].split():
            # 1
            p[message.from_user.id] += f'''‚úÖ <b>{i[message.from_user.id][0]} –∫–º</b> - <b>{pr[message.from_user.id]}</b> ‚ú®
            \n'''
        else:
            p[message.from_user.id] += f'''‚õî <b>{i[message.from_user.id][0]} –∫–º</b> - <b>{pr[message.from_user.id]}</b> ‚ú®
            \n'''

    bot.reply_to(message, f'–ù–∞–≥—Ä–∞–¥—ã –∑–∞ —Ä–∞—Åc—Ç–æ—è–Ω–∏–µ: \n \n{p[message.from_user.id]}', parse_mode='html')

    lock.release()


@bot.message_handler(commands=['cardump'])
     
def cardump(message):
    lock.acquire()

    check(message)
    cursor.execute(f'insert into logs(first_name, username, user_id, chat_id, time, command, logs) values("{message.from_user.first_name}", "{message.from_user.username}", {message.from_user.id}, {message.chat.id}, "{datetime.now()}", "use", "cardump")')
    connection.commit()

    murkup = types.InlineKeyboardMarkup(row_width=1)

    cursor.execute(f'''select all_user_cars from user_data
    where user_id = {message.from_user.id}''')
    x[message.from_user.id] = cursor.fetchall()

    all_car_tags[message.from_user.id] = x[message.from_user.id][0][0].split()

    cursor.execute(f'''select car_tag from car_balance
    where check_exclusive is NULL
    order by cost ''')
    y[message.from_user.id] = cursor.fetchall()

    all_car_tags_predump[message.from_user.id] = []
    for i[message.from_user.id] in y[message.from_user.id]:
        all_car_tags_predump[message.from_user.id].append(i[message.from_user.id][0])


    all_car_tags_dump[message.from_user.id] = []
    for i[message.from_user.id] in all_car_tags_predump[message.from_user.id]:
        if i[message.from_user.id] in all_car_tags[message.from_user.id]:
            all_car_tags_dump[message.from_user.id].append(i[message.from_user.id])

    all_cars_dump[message.from_user.id] = []
    for i[message.from_user.id] in all_car_tags_dump[message.from_user.id]:
        cursor.execute(f'''select car_name from car_balance
        where car_tag = "{i[message.from_user.id]}"''')
        y[message.from_user.id] = cursor.fetchall()
        
        all_cars_dump[message.from_user.id].append(y[message.from_user.id][0][0])
        cursor.fetchall()
    
    if len(all_cars_dump[message.from_user.id]) == 0:
        bot.reply_to(message, '<i>–£ –≤–∞—Å –Ω–µ—Ç –∞–≤—Ç–æ –¥–ª—è —Å–¥–∞—á–∏ –Ω–∞ —Å–≤–∞–ª–∫—É</i>', parse_mode='html')
    else:
        for i[message.from_user.id] in range(len(all_cars_dump[message.from_user.id])):
            murkup.add(types.InlineKeyboardButton(all_cars_dump[message.from_user.id][i[message.from_user.id]], callback_data=str(message.from_user.id)+all_car_tags_dump[message.from_user.id][i[message.from_user.id]]+'dump'))

        bot.reply_to(message, '<b>–í—Å–µ –º–∞—à–∏–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è —Å–¥–∞—á–∏ –Ω–∞ —Å–≤–∞–ª–∫—É üö´</b>', parse_mode='html' ,reply_markup=murkup)

    lock.release()




@bot.message_handler(commands=['feedback'])

def feedback(message):
    lock.acquire()

    check(message)
    
    cursor.execute(f'insert into logs(first_name, username, user_id, chat_id, time, command, logs) values("{message.from_user.first_name}", "{message.from_user.username}", {message.from_user.id}, {message.chat.id}, "{datetime.now()}", "use", "feedback")')
    connection.commit()

    if len(message.text) <= 10 or not(' ' in message.text):
        bot.reply_to(message, '<u>–ó–∞–¥–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º –ø–æ –ø–æ–≤–æ–¥—É –ø—Ä–æ–±–ª–µ–º —Å –±–æ—Ç–æ–º –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é/–¥–æ–±–∞–≤–ª–µ–Ω–∏—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞!ü§Ø</u> \n <i>\n–°–¥–µ–ª–∞—Ç—å —ç—Ç–æ –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ /feedback (–æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º)</i>', parse_mode='html')
    else:
        feed[message.from_user.id] = message.text.split(maxsplit=1)[1]
        cursor.execute(f'insert into user_feedback(user_id, user_name, user_feed) values({message.from_user.id} ,"{message.from_user.username}", "{feed[message.from_user.id]}")')
        connection.commit()

        bot.reply_to(message, '<b>–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º</b> ‚úÖ', parse_mode='html')
        cursor.execute(f'insert into logs(first_name, username, user_id, chat_id, time, command, logs) values("{message.from_user.first_name}", "{message.from_user.username}", {message.from_user.id}, {message.chat.id}, "{datetime.now()}", "feed", "give")')
        connection.commit()

    lock.release()


@bot.message_handler(commands=['store'])

def store(message):
    lock.acquire()

    check(message)

    cursor.execute(f'insert into logs(first_name, username, user_id, chat_id, time, command, logs) values("{message.from_user.first_name}", "{message.from_user.username}", {message.from_user.id}, {message.chat.id}, "{datetime.now()}", "use", "store")')
    connection.commit()

    murkup = types.InlineKeyboardMarkup(row_width=1)
    car_store = types.InlineKeyboardButton('–ú–∞—à–∏–Ω—ã üèé', callback_data=str(message.from_user.id)+'car_store')
    coin_store = types.InlineKeyboardButton('–í–∞–ª—é—Ç–∞ üí∞', callback_data=str(message.from_user.id)+'coin_store')
    case_store = types.InlineKeyboardButton('–ö–µ–π—Å—ã üß∞', callback_data=str(message.from_user.id)+'case_store')
    pack_store = types.InlineKeyboardButton('–ü–∞–∫–∏ ‚ù§Ô∏è‚Äçüî•', callback_data=str(message.from_user.id)+'pack_store')
    cancel = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞ ‚ùå', callback_data=str(message.from_user.id)+'cancelstore')

    murkup.add(car_store, coin_store, case_store, pack_store, cancel)
    bot.reply_to(message, '<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</b> üí∏', parse_mode='html', reply_markup=murkup)

    lock.release()

@bot.message_handler(commands=['donate'])
def donate(message):
    lock.acquire()

    check(message)

    cursor.execute(f'insert into logs(first_name, username, user_id, chat_id, time, command, logs) values("{message.from_user.first_name}", "{message.from_user.username}", {message.from_user.id}, {message.chat.id}, "{datetime.now()}", "use", "donate")')
    connection.commit()

    if message.chat.type == 'private':
        murkup = types.InlineKeyboardMarkup(row_width=1)
        cancel = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞ ‚ùå', callback_data='canceldon')

        cursor.execute('select cost, give from donate')
        x[message.from_user.id] = cursor.fetchall()
        for i[message.from_user.id] in x[message.from_user.id]:
            murkup.add(types.InlineKeyboardButton(f'{i[message.from_user.id][1]} {creditto(i[message.from_user.id][1])} ‚û° {i[message.from_user.id][0]}‚ÇΩ', callback_data=str(i[message.from_user.id][0])))

        murkup.add(cancel)

        bot.reply_to(message, '<b>–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å</b> üí∏', parse_mode='html', reply_markup=murkup)
    else:
        bot.reply_to(message, '<b>–î–æ–Ω–∞—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö</b> üí∏', parse_mode='html')

    lock.release()


@bot.message_handler()

def promocode(message):
    lock.acquire()
    
    check(message)

    if message.chat.type == 'private':
        prom[message.from_user.id] = 0
        cursor.execute('select code, what_give, car_give, coin_give, case_give, activation from promo')
        x[message.from_user.id] = cursor.fetchall()

        for i[message.from_user.id] in x[message.from_user.id]:
            if message.text == i[message.from_user.id][0]:
                cursor.execute(f'''select all_using_codes, all_user_cars, user_balance, all_user_cases from user_data
                where user_id = {message.from_user.id}''')
                y[message.from_user.id] = cursor.fetchall()

                if i[message.from_user.id][0] in y[message.from_user.id][0][0]:
                    bot.reply_to(message, f'<b>–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –¥–∞–Ω–Ω—ã–π –∫–æ–¥üíû</b>', parse_mode='html')
                    prom[message.from_user.id] = 1
                    break
                if i[message.from_user.id][5] is None:
                    connection.commit()
                elif i[message.from_user.id][5] > 0:
                    cursor.execute(f'''update promo
                    set activation = {i[message.from_user.id][5] - 1}
                    where code = "{i[message.from_user.id][0]}"''')
                    connection.commit()

                else:
                    bot.reply_to(message, f'<b>–£ –¥–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏üíû</b>', parse_mode='html')
                    cursor.execute(f'insert into logs(first_name, username, user_id, chat_id, time, command, logs) values("{message.from_user.first_name}", "{message.from_user.username}", {message.from_user.id}, {message.chat.id}, "{datetime.now()}", "try_code", "{i[message.from_user.id][0]}")')
                    connection.commit()
                    prom[message.from_user.id] = 1
                    break

                if i[message.from_user.id][1] == 1:
                    cursor.execute(f'''select car_name, check_exclusive, cost from car_balance
                    where car_tag = "{i[message.from_user.id][2]}"''')
                    z[message.from_user.id] = cursor.fetchall()

                    if i[message.from_user.id][2] in y[message.from_user.id][0][1]:
                        if z[message.from_user.id][0][1] == 2:
                            if not i[message.from_user.id][4] is None:
                                cursor.execute(f'''update promo
                                set activation = {i[message.from_user.id][4] + 1}
                                where code = "{i[message.from_user.id][0]}"''')
                                connection.commit()

                            bot.reply_to(message, '<b>–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b> \n<i>–£ –≤–∞—Å —É–∂–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –¥–∞–Ω–Ω–æ–µ —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ <b>–∞–≤—Ç–æ</b>, –ø–æ—ç—Ç–æ–º—É –≤—ã –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏—Ç–µ üö´</i>', parse_mode='html') 

                        else:
                            cursor.execute(f'''update user_data
                            set user_balance = {y[message.from_user.id][0][2] + round(z[message.from_user.id][0][2]*0.75)}
                            where user_id = {message.from_user.id}''')
                            connection.commit()

                            bot.reply_to(message, f'<b>–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b> \n<i>–£ –≤–∞—Å —É–∂–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ <u>{z[message.from_user.id][0][0]}</u>, –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–≤–∞–ª–∫–∏, –∞ –∏–º–µ–Ω–Ω–æ {round(z[message.from_user.id][0][2]*0.75)} {cointo(round(z[message.from_user.id][0][2]*0.75))}</i> üòê', parse_mode='html')

                    else:
                        cursor.execute(f'''update user_data
                        set all_user_cars = "{y[message.from_user.id][0][1]+' '+i[message.from_user.id][2]}"
                        where user_id = {message.from_user.id}''')
                        connection.commit()

                        if z[message.from_user.id][0][1] == 2:
                            bot.reply_to(message, f'<b>–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b> \n<i>–í—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ <u>—Å–µ–∫—Ä–µ—Ç–Ω–æ–µ –∞–≤—Ç–æ</u> <b>{z[message.from_user.id][0][0]}</b>, –æ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –≥–∞—Ä–∞–∂–µ</i> üéâ ', parse_mode='html')
                        else:
                            bot.reply_to(message, f'<b>–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b> \n<i>–í—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ <u>–∞–≤—Ç–æ</u> <b>{z[message.from_user.id][0][0]}</b>, –æ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –≥–∞—Ä–∞–∂–µ</i> üéâ', parse_mode='html')

                elif i[message.from_user.id][1] == 2:
                    cursor.execute(f'''update user_data
                    set user_balance = {y[message.from_user.id][0][2] + i[message.from_user.id][3]}
                    where user_id = {message.from_user.id}''')
                    connection.commit()

                    bot.reply_to(message, f'<b>–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b> \n<i>–í—ã –ø–æ–ª—É—á–∏–ª–∏ <u>{i[message.from_user.id][3]} {cointo(i[message.from_user.id][3])}</u></i>üéÅ', parse_mode='html')
                
                elif i[message.from_user.id][1] == 3:
                    if i[message.from_user.id][4]+'+' in y[message.from_user.id][0][3]:
                        all_case_tags[message.from_user.id] = y[message.from_user.id][0][3].split()

                        for a[message.from_user.id] in range (len(all_case_tags[message.from_user.id])):
                            if all_case_tags[message.from_user.id][a[message.from_user.id]].split('+')[0] == i[message.from_user.id][4]:
                                all_case_tags[message.from_user.id][a[message.from_user.id]] = all_case_tags[message.from_user.id][a[message.from_user.id]].split('+')[0]+'+'+str(int(all_case_tags[message.from_user.id][a[message.from_user.id]].split('+')[1])+1)
                                break
                        cursor.execute(f'''update user_data
                        set all_user_cases = "{' '.join(all_case_tags[message.from_user.id])}"
                        where user_id = {message.from_user.id}''')
                        connection.commit()

                    else:        
                        cursor.execute(f'''update user_data
                        set all_user_cases = "{y[message.from_user.id][0][3]+' '+i[message.from_user.id][4]+'+1'}"
                        where user_id = {message.from_user.id}''')
                        connection.commit()

                    cursor.execute(f'''select case_name from cases
                    where case_tag = "{i[message.from_user.id][4]}"''')
                    z[message.from_user.id] = cursor.fetchall()

                    bot.reply_to(message, f'<b>–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b> \n<i>–í—ã –ø–æ–ª—É—á–∏–ª–∏ –∫–µ–π—Å <u>{z[message.from_user.id][0][0]}</u></i>üéÅ', parse_mode='html')

                elif i[message.from_user.id][1] == 4:
                    p[message.from_user.id] = ''

                    if not i[message.from_user.id][2] is None:
                        cursor.execute(f'''select car_name, check_exclusive, cost from car_balance
                        where car_tag = "{i[message.from_user.id][2]}"''')
                        z[message.from_user.id] = cursor.fetchall()

                        if i[message.from_user.id][2] in y[message.from_user.id][0][1]:
                            if z[message.from_user.id][0][1] == 2:
                                p[message.from_user.id] += f'<i>–£ –≤–∞—Å —É–∂–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ –∞–≤—Ç–æ <u>{z[message.from_user.id][0][0]}</u> \n'

                            else:
                                cursor.execute(f'''update user_data
                                set user_balance = {y[message.from_user.id][0][2] + round(z[message.from_user.id][0][2]*0.75)}
                                where user_id = {message.from_user.id}''')
                                connection.commit()

                                p[message.from_user.id] += f'<i>–£ –≤–∞—Å —É–∂–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ <u>{z[message.from_user.id][0][0]}</u>, –ø–æ—ç—Ç–æ–º—É –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–≤–∞–ª–∫—É –∞–≤—Ç–æ {round(z[message.from_user.id][0][2]*0.75)} {cointo(round(z[message.from_user.id][0][2]*0.75))}</i> üòê \n'
                        else:
                            cursor.execute(f'''update user_data
                            set all_user_cars = "{y[message.from_user.id][0][1]+' '+i[message.from_user.id][2]}"
                            where user_id = {message.from_user.id}''')
                            connection.commit()

                            if z[message.from_user.id][0][1] == 2:
                                p[message.from_user.id] +=  f'<i>–í—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ <u>—Å–µ–∫—Ä–µ—Ç–Ω–æ–µ –∞–≤—Ç–æ</u> <b>{z[message.from_user.id][0][0]}</b>, –æ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –≥–∞—Ä–∞–∂–µ ü§´ \n'
                            else:
                                p[message.from_user.id] += f'<i>–í—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ <u>–∞–≤—Ç–æ</u> <b>{z[message.from_user.id][0][0]}</b>, –æ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –≥–∞—Ä–∞–∂–µ ü§´ \n'

                    if not i[message.from_user.id][3] is None:
                        if not i[message.from_user.id][3] is None:
                            cursor.execute(f'''update user_data
                            set user_balance = {y[message.from_user.id][0][2] + i[message.from_user.id][3] + round(z[message.from_user.id][0][2]*0.75)}
                            where user_id = {message.from_user.id}''')
                            connection.commit()
                        else:
                            cursor.execute(f'''update user_data
                            set user_balance = {y[message.from_user.id][0][2] + i[message.from_user.id][3]}
                            where user_id = {message.from_user.id}''')
                            connection.commit()

                        if p[message.from_user.id] == '':
                            p[message.from_user.id] += f'<i>–ê —Ç–∞–∫–∂–µ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ <u>{i[message.from_user.id][3]} {cointo(i[message.from_user.id][3])}</u></i> '
                        else:
                            p[message.from_user.id] += f'<i>–í—ã –ø–æ–ª—É—á–∏–ª–∏ <u>{i[message.from_user.id][3]} {cointo(i[message.from_user.id][3])}</u></i>'
                            if i[message.from_user.id][4] is None:
                                p[message.from_user.id] += 'üéÅ'
                            else:
                                p[message.from_user.id] += ' '

                    if not i[message.from_user.id][4] is None:
                        if i[message.from_user.id][4]+'+' in y[message.from_user.id][0][3]:
                            all_case_tags[message.from_user.id] = y[message.from_user.id][0][3].split()

                            for a[message.from_user.id] in range (len(all_case_tags[message.from_user.id])):
                                if all_case_tags[message.from_user.id][a[message.from_user.id]].split('+')[0] == i[message.from_user.id][4]:
                                    all_case_tags[message.from_user.id][a[message.from_user.id]] = all_case_tags[message.from_user.id][a[message.from_user.id]].split('+')[0]+'+'+str(int(all_case_tags[message.from_user.id][a[message.from_user.id]].split('+')[1])+1)
                                    break
                            cursor.execute(f'''update user_data
                            set all_user_cases = "{' '.join(all_case_tags[message.from_user.id])}"
                            where user_id = {message.from_user.id}''')
                            connection.commit()

                        else:        
                            cursor.execute(f'''update user_data
                            set all_user_cases = "{y[message.from_user.id][0][3]+' '+i[message.from_user.id][4]+'+1'}"
                            where user_id = {message.from_user.id}''')
                            connection.commit()

                        cursor.execute(f'''select case_name from cases
                        where case_tag = "{i[message.from_user.id][4]}"''')
                        z[message.from_user.id] = cursor.fetchall()

                        if i[message.from_user.id][3] is None:
                            p[message.from_user.id] += f'<i>–ê —Ç–∞–∫–∂–µ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –∫–µ–π—Å <u>{z[message.from_user.id][0][0]}</u></i>üéÅ'
                        else:
                            p[message.from_user.id] += f'<i>–∏ –∫–µ–π—Å <u>{z[message.from_user.id][0][0]}</u></i>üéÅ'
                        
                    bot.reply_to(message, p[message.from_user.id], parse_mode='html')

                cursor.execute(f'''update user_data
                set all_using_codes = "{y[message.from_user.id][0][0]+' '+i[message.from_user.id][0]}"
                where user_id = {message.from_user.id}''')
                connection.commit()


                cursor.execute(f'insert into logs(first_name, username, user_id, chat_id, time, command, logs) values("{message.from_user.first_name}", "{message.from_user.username}", {message.from_user.id}, {message.chat.id}, "{datetime.now()}", "code", "{i[message.from_user.id][0]}")')
                connection.commit()
                prom[message.from_user.id] = 1
                break

        if '/promo_' in message.text and prom[message.from_user.id] == 0:
            bot.reply_to(message, f'<b>–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞</b> üö´', parse_mode='html')
    lock.release()

@bot.callback_query_handler(func=lambda call:True)

def callback(call):
    lock.acquire()

    global cancel, checker, pr_store
    murkup = types.InlineKeyboardMarkup(row_width=1)

    # if call.message:
    try:
        if call.data == str(call.from_user.id)+'cancelgarage':
            bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.id, text = '–í—ã <i>–æ—Å—Ç–∞–ª–∏—Å—å</i> –Ω–∞ –ø—Ä–µ–∂–Ω–µ–º –∞–≤—Ç–æ ‚ùå', parse_mode='html')
        elif call.data == str(call.from_user.id)+'cancelshop':
            bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.id, text = '–í—ã <i>–æ—Ç–∫–∞–∑–∞–ª–∏—Å—å</i> –æ—Ç –ø–æ–∫—É–ø–∫–∏ ‚ùå', parse_mode='html')
        elif call.data == str(call.from_user.id)+'canceldump':
            bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.id, text = '–í—ã <i>–æ—Ç–∫–∞–∑–∞–ª–∏—Å—å</i> –æ—Ç —Å–¥–∞—á–∏ –∞–≤—Ç–æ –Ω–∞ —Å–≤–∞–ª–∫—É ‚ùå', parse_mode='html')
        elif call.data == str(call.from_user.id)+'cancelstore':
            bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.id, text = '–í—ã <i>–æ—Ç–∫–∞–∑–∞–ª–∏—Å—å</i> –æ—Ç –ø–æ–∫—É–ø–∫–∏ ‚ùå', parse_mode='html')
        elif call.data == 'canceldon':
            bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.id, text = '–í—ã <i>–æ—Ç–∫–∞–∑–∞–ª–∏—Å—å</i> –æ—Ç –¥–æ–Ω–∞—Ç–∞ ‚ùå', parse_mode='html')
        elif call.data == str(call.from_user.id)+'cancelcase':
            bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.id, text = '–í—ã <i>–æ—Ç–∫–∞–∑–∞–ª–∏—Å—å</i> –æ—Ç –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞ ‚ùå', parse_mode='html')
        elif call.data == str(call.from_user.id)+'info1':
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text= '''<b><u>–í–æ—Ç —Ç–µ–±–µ –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç—Ç–æ–º —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–µ</u> üß∏

‚Ä¢ –ö–æ–º–∞–Ω–¥–∞ /drive <u>—Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –≤–ø–µ—Ä–µ–¥, –ª–∏–±–æ –∂–µ –Ω–∞–∑–∞–¥</u>
–¢–∞–∫–∂–µ —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç <u>—Ä–∞–∑–ª–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–∫–∞—Ç–∞</u>

‚Ä¢ –ú–∞—à–∏–Ω–∞ –∏–∑ <u>–∞–≤—Ç–æ—Å–∞–ª–æ–Ω–∞</u> - 3 —á–∞—Å–∞

‚Ä¢ –ú–∞—à–∏–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–∞ <u>–ø—É—Ç–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π</u> - 6 —á–∞—Å–æ–≤

‚Ä¢ <u>–î–æ–Ω–∞—Ç</u> –º–∞—à–∏–Ω–∞ - 2 —á–∞—Å–∞

–†–∞–∑—É–º–µ–µ—Ç—Å—è <u>–≤—Å–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–æ</u>. –ö–∞–∂–¥–∞—è –º–∞—à–∏–Ω–∞ –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è üíú 
    
‚Ä¢ –ó–∞—Ö–æ–¥–∏ –≤ <u>–∞–≤—Ç–æ—Å–∞–ª–æ–Ω</u>, –ø—Ä–∏—Å–º–æ—Ç—Ä–∏ —Å–µ–±–µ —Ç–∞—á–∫—É –º–µ—á—Ç—ã, –º–æ–∂–µ—Ç —á—Ç–æ-—Ç–æ –∏ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è. –ò–ª–∏ –º–æ–∂–µ—Ç —Ç—ã –∞–∑–∞—Ä—Ç–Ω—ã–π, –∏ –≥–æ—Ç–æ–≤ –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É, –ø–æ–π–º–∞—Ç—å —Ä–µ–¥–∫–æ–µ –∞–≤—Ç–æ –≤ –∫–µ–π—Å–∞—Ö?  /shop ü•∞ 

‚Ä¢ –ù–∞–¥–æ–µ–ª–æ –∞–≤—Ç–æ, —Ö–æ—á–µ—à—å –ø—Ä–∏–∫—É–ø–∏—Ç—å –Ω–æ–≤–æ–µ? –ù–µ –±–µ–¥–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /cardump, —á—Ç–æ–±—ã –æ—Ç–≤–µ–∑—Ç–∏ –≤ —É—Ç–∏–ª—å —Å–≤–æ–µ –∞–≤—Ç–æ, –∏ –ø–æ–ª—É—á–∏—Ç—å –Ω–µ–ø–ª–æ—Ö–æ–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ ‚ôªÔ∏è

‚Ä¢ –ù–µ –∑–∞–±—ã–≤–∞–π –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –∞–≤—Ç–æ, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—ã–±–∏—Ä–∞—Ç—å –µ–≥–æ –≤ –∞–≤—Ç–æ–ø–∞—Ä–∫–µ /autopark üÖøÔ∏è

‚Ä¢ –í—Å–µ-—Ç–∞–∫–∏ –∫—É–ø–∏–ª –∫–µ–π—Å–æ–≤? –ó–∞—Ö–æ–¥–∏ /cases –∏ –æ—Ç–∫—Ä—ã–≤–∞–π! üß∞

‚Ä¢ –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å, –∫—Ç–æ —Å–µ–π—á–∞—Å —Ç–æ–ø-1, –∏–ª–∏ –ø–æ–ø–∞—Å—Ç—å —Ç—É–¥–∞ —Å–∞–º–æ–º—É? –ö–æ–º–∞–Ω–¥–∞ /top –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –≤ —ç—Ç–æ–º üèÜ

‚Ä¢ –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥—É–º–∞—é—Ç –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö, –∏ –¥–æ–±–∞–≤–∏–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å, –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –º–∞—à–∏–Ω—ã, –∫–æ–∏–Ω—ã, –∫—Ä–µ–¥–∏—Ç—ã –∏ –¥—Ä—É–≥–æ–µ. –ü–æ–¥—Ä–æ–±–Ω–µ–µ /promo üí£ 

‚Ä¢ –•–æ—á–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –∏ –ø–æ–ª—É—á–∏—Ç—å –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ? –Ø –¥—É–º–∞—é, —Ç—ã —Ä–∞–∑–±–µ—Ä–µ—à—å—Å—è /donate üí∏

‚Ä¢ –ï—Å—Ç—å –¥–æ–Ω–∞—Ç-–≤–∞–ª—é—Ç–∞? –•–æ—á–µ—à—å –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –µ–µ? –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ /store! üëàüèª

‚Ä¢ –ö–æ–º–∞–Ω–¥–∞ /feedback —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ "–∏–≥—Ä—ã". –ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç <u>–∫–∞–∫–∞—è-—Ç–æ –º–µ—Ö–∞–Ω–∏–∫–∞, —Ö–æ—á–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ—é –º–∞—à–∏–Ω—É</u>? –ü–∏—à–∏ –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—èüìù</b>
                ''', parse_mode= 'html')
        elif call.data == str(call.from_user.id)+'startshop':
            cars = types.InlineKeyboardButton('–ú–∞—à–∏–Ω—ã üèé', callback_data=str(call.from_user.id)+'carssshop')
            cases = types.InlineKeyboardButton('–ö–µ–π—Å—ã üß∞', callback_data=str(call.from_user.id)+'casesshop')
            cancel = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞ ‚ùå', callback_data=str(call.from_user.id)+'cancelshop')

            murkup.add(cars, cases, cancel)

            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text='<i>–ú–∞–≥–∞–∑–∏–Ω üõí</i>', parse_mode='html' ,reply_markup=murkup)
        
        elif call.data == str(call.from_user.id)+'startgarage':
            legs = types.InlineKeyboardButton('–ù–æ–≥–∏ üë£', callback_data=str(call.from_user.id)+'legs'+'garage')
            shoper = types.InlineKeyboardButton('–ü–æ–∫—É–ø–Ω—ã–µ üõû', callback_data=str(call.from_user.id)+'shoper')
            exclusiver = types.InlineKeyboardButton('–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ ‚ú®', callback_data=str(call.from_user.id)+'exclusiver')
            secreter = types.InlineKeyboardButton('–°–µ–∫—Ä–µ—Ç–Ω—ã–µ üîÆ', callback_data=str(call.from_user.id)+'secreter')
            donater = types.InlineKeyboardButton('–î–æ–Ω–∞—Ç–Ω—ã–µ üíé', callback_data=str(call.from_user.id)+'donater')
            cancel = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞ ‚ùå', callback_data=str(call.from_user.id)+'cancelgarage')

            murkup.add(legs, shoper, exclusiver, secreter, donater, cancel)

            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text='<i>–í–∞—à –∞–≤—Ç–æ–ø–∞—Ä–∫ üÖø</i>', parse_mode='html' ,reply_markup=murkup)

        elif call.data == str(call.from_user.id)+'startdon':
            cursor.execute('select cost, give from donate')
            x[call.from_user.id] = cursor.fetchall()
            for i[call.from_user.id] in x[call.from_user.id]:
                murkup.add(types.InlineKeyboardButton(f'{i[call.from_user.id][1]} {creditto(i[call.from_user.id][1])} ‚û° {i[call.from_user.id][0]}‚ÇΩ', callback_data=str(i[call.from_user.id][0])))

            murkup.add(cancel)

            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text='<b>–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å</b> üí∏', parse_mode='html', reply_markup=murkup)

        elif call.data == str(call.from_user.id)+'startstore':
            car_store = types.InlineKeyboardButton('–ú–∞—à–∏–Ω—ã üèé', callback_data=str(call.from_user.id)+'car_store')
            coin_store = types.InlineKeyboardButton('–í–∞–ª—é—Ç–∞ üí∞', callback_data=str(call.from_user.id)+'coin_store')
            case_store = types.InlineKeyboardButton('–ö–µ–π—Å—ã üß∞', callback_data=str(call.from_user.id)+'case_store')
            pack_store = types.InlineKeyboardButton('–ü–∞–∫–∏ ‚ù§Ô∏è‚Äçüî•', callback_data=str(call.from_user.id)+'pack_store')
            cancel = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞ ‚ùå', callback_data=str(call.from_user.id)+'cancelstore')

            murkup.add(car_store, coin_store, case_store, pack_store, cancel)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text='<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</b> üí∏', parse_mode='html', reply_markup=murkup)

        elif call.data == str(call.from_user.id)+'startdump':
            cursor.execute(f'''select all_user_cars from user_data
            where user_id = {call.from_user.id}''')
            x[call.from_user.id] = cursor.fetchall()

            all_car_tags[call.from_user.id] = x[call.from_user.id][0][0].split()

            cursor.execute(f'''select car_tag from car_balance
            where check_exclusive is NULL
            order by cost ''')
            y[call.from_user.id] = cursor.fetchall()

            all_car_tags_predump[call.from_user.id] = []
            for i[call.from_user.id] in y[call.from_user.id]:
                all_car_tags_predump[call.from_user.id].append(i[call.from_user.id][0])


            all_car_tags_dump[call.from_user.id] = []
            for i[call.from_user.id] in all_car_tags_predump[call.from_user.id]:
                if i[call.from_user.id] in all_car_tags[call.from_user.id]:
                    all_car_tags_dump[call.from_user.id].append(i[call.from_user.id])

            all_cars_dump[call.from_user.id] = []
            for i[call.from_user.id] in all_car_tags_dump[call.from_user.id]:
                cursor.execute(f'''select car_name from car_balance
                where car_tag = "{i[call.from_user.id]}"''')
                y[call.from_user.id] = cursor.fetchall()
                
                all_cars_dump[call.from_user.id].append(y[call.from_user.id][0][0])
                cursor.fetchall()
            
            if len(all_cars_dump[call.from_user.id]) == 0:
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text='<i>–£ –≤–∞—Å –Ω–µ—Ç –∞–≤—Ç–æ –¥–ª—è —Å–¥–∞—á–∏ –Ω–∞ —Å–≤–∞–ª–∫—É</i>', parse_mode='html')
            else:
                for i[call.from_user.id] in range(len(all_cars_dump[call.from_user.id])):
                    murkup.add(types.InlineKeyboardButton(all_cars_dump[call.from_user.id][i[call.from_user.id]], callback_data=str(call.from_user.id)+all_car_tags_dump[call.from_user.id][i[call.from_user.id]]+'dump'))

                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text='<b>–í—Å–µ –º–∞—à–∏–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è —Å–¥–∞—á–∏ –Ω–∞ —Å–≤–∞–ª–∫—É üö´</b>', parse_mode='html' ,reply_markup=murkup)

        elif call.data == str(call.from_user.id)+'startcases':
            murkup = types.InlineKeyboardMarkup(row_width=1)
            cancel = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞ ‚ùå', callback_data=str(call.from_user.id)+'cancelcase')

            cursor.execute(f'''select all_user_cases from user_data
            where user_id = {call.from_user.id}''')
            x[call.from_user.id] = cursor.fetchall()

            a[call.from_user.id] = x[call.from_user.id][0][0].split()
            all_case_tags[call.from_user.id] = []
            all_case_kol[call.from_user.id] = []
            for i[call.from_user.id] in a[call.from_user.id]:
                all_case_tags[call.from_user.id].append(i[call.from_user.id].split('+')[0])
                all_case_kol[call.from_user.id].append(i[call.from_user.id].split('+')[1])
            if len(all_case_tags[call.from_user.id]) == 0:
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text='<i>–£ –≤–∞—Å –Ω–µ—Ç –∫–µ–π—Å–æ–≤ üö´</i>', parse_mode='html' ,reply_markup=murkup)
            else:
                for i[call.from_user.id] in range(len(all_case_tags[call.from_user.id])):
                    cursor.execute(f'''select case_name from cases
                    where case_tag = "{all_case_tags[call.from_user.id][i[call.from_user.id]]}"''')
                    y[call.from_user.id] = cursor.fetchall()

                    murkup.add(types.InlineKeyboardButton(f'{y[call.from_user.id][0][0]} X{all_case_kol[call.from_user.id][i[call.from_user.id]]}', callback_data=str(call.from_user.id)+all_case_tags[call.from_user.id][i[call.from_user.id]]+'caseselect'))
                murkup.add(cancel)

                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text='<i>–í—Å–µ –≤–∞—à–∏ –∫–µ–π—Å—ã üß∞</i>', parse_mode='html' ,reply_markup=murkup)

        elif call.data == str(call.from_user.id)+'car_store':
            back = types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è', callback_data=str(call.from_user.id)+'startstore')
            cancel = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞ ‚ùå', callback_data=str(call.from_user.id)+'cancelstore')

            cursor.execute('''select pack_tag, pack_name, cost, car_give from store
            where what_give = 1
            order by cost''')
            x[call.from_user.id] = cursor.fetchall()

            for i[call.from_user.id] in range(len(x[call.from_user.id])):
                murkup.add(types.InlineKeyboardButton(f'{x[call.from_user.id][i[call.from_user.id]][1]} ‚û° {x[call.from_user.id][i[call.from_user.id]][2]} {creditto(x[call.from_user.id][i[call.from_user.id]][2])}', callback_data=str(call.from_user.id)+x[call.from_user.id][i[call.from_user.id]][0]+'prestore'))
            murkup.add(back, cancel)

            bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.id, text = '<i>–í—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ –ø–æ–∫—É–ø–∫–µ <b>–∞–≤—Ç–æ üèé</b></i>', parse_mode='html', reply_markup=murkup) 
        
        elif call.data == str(call.from_user.id)+'coin_store':
            back = types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è', callback_data=str(call.from_user.id)+'startstore')
            cancel = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞ ‚ùå', callback_data=str(call.from_user.id)+'cancelstore')
                                            
            cursor.execute('''select pack_tag, pack_name, cost, coin_give from store
            where what_give = 2
            order by cost''')
            x[call.from_user.id] = cursor.fetchall()

            for i[call.from_user.id] in range(len(x[call.from_user.id])):
                murkup.add(types.InlineKeyboardButton(f'{x[call.from_user.id][i[call.from_user.id]][1]} ‚û° {x[call.from_user.id][i[call.from_user.id]][2]} {creditto(x[call.from_user.id][i[call.from_user.id]][2])}', callback_data=str(call.from_user.id)+x[call.from_user.id][i[call.from_user.id]][0]+'prestore'))
            murkup.add(back, cancel)

            bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.id, text = '<i>–í—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ –ø–æ–∫—É–ø–∫–µ <b>–≤–∞–ª—é—Ç—ã üí∞</b></i>', parse_mode='html', reply_markup=murkup)
        
        elif call.data == str(call.from_user.id)+'case_store':
            back = types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è', callback_data=str(call.from_user.id)+'startstore')
            cancel = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞ ‚ùå', callback_data=str(call.from_user.id)+'cancelstore')

            cursor.execute('''select pack_tag, pack_name, cost, car_give, coin_give, case_give from store
            where what_give = 3
            order by cost''')
            x[call.from_user.id] = cursor.fetchall()

            for i[call.from_user.id] in range(len(x[call.from_user.id])):
                murkup.add(types.InlineKeyboardButton(f'{x[call.from_user.id][i[call.from_user.id]][1]} ‚û° {x[call.from_user.id][i[call.from_user.id]][2]} {creditto(x[call.from_user.id][i[call.from_user.id]][2])}', callback_data=str(call.from_user.id)+x[call.from_user.id][i[call.from_user.id]][0]+'prestore'))
            murkup.add(back, cancel)

            bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.id, text = '<i>–í—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ –ø–æ–∫—É–ø–∫–µ <b>–∫–µ–π—Å–æ–≤ üß∞</b></i>', parse_mode='html', reply_markup=murkup) 

        elif call.data == str(call.from_user.id)+'pack_store':
            back = types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è ', callback_data=str(call.from_user.id)+'startstore')
            cancel = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞ ‚ùå', callback_data=str(call.from_user.id)+'cancelstore')

            cursor.execute('''select pack_tag, pack_name, cost, car_give, coin_give, case_give from store
            where what_give = 4
            order by cost''')
            x[call.from_user.id] = cursor.fetchall()

            for i[call.from_user.id] in range(len(x[call.from_user.id])):
                murkup.add(types.InlineKeyboardButton(f'{x[call.from_user.id][i[call.from_user.id]][1]} ‚û° {x[call.from_user.id][i[call.from_user.id]][2]} {creditto(x[call.from_user.id][i[call.from_user.id]][2])}', callback_data=str(call.from_user.id)+x[call.from_user.id][i[call.from_user.id]][0]+'prestore'))
            murkup.add(back, cancel)

            bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.id, text = '<i>–í—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ –ø–æ–∫—É–ø–∫–µ <b>–∫–æ–º–ø–ª–µ–∫—Ç–æ–≤ ‚ù§Ô∏è‚Äçüî•</b></i>', parse_mode='html', reply_markup=murkup) 

        elif call.data == str(call.from_user.id)+'shoper':
            back = types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è', callback_data=str(call.from_user.id)+'startgarage')
            cancel = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞‚ùå', callback_data=str(call.from_user.id)+'cancelgarage')

            cursor.execute(f'''select all_user_cars from user_data
            where user_id = {call.from_user.id}''')
            x[call.from_user.id] = cursor.fetchall()

            cursor.execute(f'''select car_tag, car_name from car_balance
            where check_exclusive is NULL
            order by max_step''')
            y[call.from_user.id] = cursor.fetchall()

            b[call.from_user.id] = 0
            for i[call.from_user.id] in y[call.from_user.id]:
                if i[call.from_user.id][0] in x[call.from_user.id][0][0]:
                    b[call.from_user.id] = 1
                    murkup.add(types.InlineKeyboardButton(f'{i[call.from_user.id][1]} üõû', callback_data=str(call.from_user.id)+i[call.from_user.id][0]+'garage'))

            if b[call.from_user.id] == 1:
                murkup.add(back, cancel)
                bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.id, text = f'<i>–í—Å–µ –≤–∞—à–∏ –ø–æ–∫—É–ø–Ω—ã–µ –∞–≤—Ç–æ üöò</i>', parse_mode='html', reply_markup=murkup)
            else:
                bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.id, text = f'<b>–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–∫—É–ø–Ω—ã—Ö –∞–≤—Ç–æ üõû</b>', parse_mode='html', reply_markup=murkup)

        elif call.data == str(call.from_user.id)+'exclusiver':
            back = types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è', callback_data=str(call.from_user.id)+'startgarage')
            cancel = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞‚ùå', callback_data=str(call.from_user.id)+'cancelgarage')

            cursor.execute(f'''select all_user_cars from user_data
            where user_id = {call.from_user.id}''')
            x[call.from_user.id] = cursor.fetchall()

            cursor.execute(f'''select car_tag, car_name from car_balance
            where check_exclusive = 1
            order by max_step''')
            y[call.from_user.id] = cursor.fetchall()

            b[call.from_user.id] = 0
            for i[call.from_user.id] in y[call.from_user.id]:
                if i[call.from_user.id][0] in x[call.from_user.id][0][0]:
                    b[call.from_user.id] = 1
                    murkup.add(types.InlineKeyboardButton(f'{i[call.from_user.id][1]} ‚ú®', callback_data=str(call.from_user.id)+i[call.from_user.id][0]+'garage'))

            if b[call.from_user.id] == 1:
                murkup.add(back, cancel)
                bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.id, text = f'<i>–í—Å–µ –≤–∞—à–∏ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –∞–≤—Ç–æ üèéÔ∏è</i>', parse_mode='html', reply_markup=murkup)
            else:
                bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.id, text = f'<b>–£ –≤–∞—Å –Ω–µ—Ç —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã—Ö –∞–≤—Ç–æ ‚ú®</b>', parse_mode='html', reply_markup=murkup)

        elif call.data == str(call.from_user.id)+'secreter':
            back = types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è', callback_data=str(call.from_user.id)+'startgarage')
            cancel = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞‚ùå', callback_data=str(call.from_user.id)+'cancelgarage')

            cursor.execute(f'''select all_user_cars from user_data
            where user_id = {call.from_user.id}''')
            x[call.from_user.id] = cursor.fetchall()

            cursor.execute(f'''select car_tag, car_name from car_balance
            where check_exclusive = 2
            order by max_step''')
            y[call.from_user.id] = cursor.fetchall()

            b[call.from_user.id] = 0
            for i[call.from_user.id] in y[call.from_user.id]:
                if i[call.from_user.id][0] in x[call.from_user.id][0][0]:
                    b[call.from_user.id] = 1
                    murkup.add(types.InlineKeyboardButton(f'{i[call.from_user.id][1]} üîÆ', callback_data=str(call.from_user.id)+i[call.from_user.id][0]+'garage'))

            if b[call.from_user.id] == 1:
                murkup.add(back, cancel)
                bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.id, text = f'<i>–í—Å–µ –≤–∞—à–∏ —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –∞–≤—Ç–æ üõª</i>', parse_mode='html', reply_markup=murkup)
            else:
                bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.id, text = f'<b>–£ –≤–∞—Å –Ω–µ—Ç —Å–µ–∫—Ä–µ—Ç–Ω—ã—Ö –∞–≤—Ç–æ üîÆ</b>', parse_mode='html', reply_markup=murkup)

        elif call.data == str(call.from_user.id)+'donater':
            back = types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è', callback_data=str(call.from_user.id)+'startgarage')
            cancel = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞‚ùå', callback_data=str(call.from_user.id)+'cancelgarage')

            cursor.execute(f'''select all_user_cars from user_data
            where user_id = {call.from_user.id}''')
            x[call.from_user.id] = cursor.fetchall()

            cursor.execute(f'''select car_tag, car_name from car_balance
            where check_exclusive = 3 or check_exclusive = 4
            order by max_step''')
            y[call.from_user.id] = cursor.fetchall()

            b[call.from_user.id] = 0
            for i[call.from_user.id] in y[call.from_user.id]:
                if i[call.from_user.id][0] in x[call.from_user.id][0][0]:
                    b[call.from_user.id] = 1
                    murkup.add(types.InlineKeyboardButton(f'{i[call.from_user.id][1]} üíé', callback_data=str(call.from_user.id)+i[call.from_user.id][0]+'garage'))

            if b[call.from_user.id] == 1:
                murkup.add(back, cancel)
                bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.id, text = f'<i>–í—Å–µ –≤–∞—à–∏ –¥–æ–Ω–∞—Ç–Ω—ã–µ –∞–≤—Ç–æ üèé</i>', parse_mode='html', reply_markup=murkup)
            else:
                bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.id, text = f'<b>–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–Ω–∞—Ç–Ω—ã—Ö –∞–≤—Ç–æ üíé</b>', parse_mode='html', reply_markup=murkup)

        elif call.data == str(call.from_user.id)+'carssshop':
            cancel = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞‚ùå', callback_data=str(call.from_user.id)+'cancelshop')
            back = types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è', callback_data=str(call.from_user.id)+'startshop')
            eco = types.InlineKeyboardButton('–≠–∫–æ–Ω–æ–º üöò', callback_data=str(call.from_user.id)+'careco')
            standart = types.InlineKeyboardButton('–°—Ç–∞–Ω–¥–∞—Ä—Ç üöó', callback_data=str(call.from_user.id)+'carstandart')
            comfort  = types.InlineKeyboardButton('–ö–æ–º—Ñ–æ—Ä—Ç üöï', callback_data=str(call.from_user.id)+'carcomfort')
            business  = types.InlineKeyboardButton('–ë–∏–∑–Ω–µ—Å ‚úàÔ∏è', callback_data=str(call.from_user.id)+'carbusiness')
            premium = types.InlineKeyboardButton('–ü—Ä–µ–º–∏—É–º üöÄ', callback_data=str(call.from_user.id)+'carpremium')
            elit = types.InlineKeyboardButton('–≠–ª–∏—Ç üöÑ', callback_data=str(call.from_user.id)+'carelit')

            murkup.add(eco, standart, comfort, business, premium, elit, back, cancel)

            bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.id, text = '<i>–ê–≤—Ç–æ—Å–∞–ª–æ–Ω üè™ </i>', parse_mode='html' ,reply_markup=murkup)
        
        elif call.data == str(call.from_user.id)+'careco':
            murkup.row_width = 1
            cancel = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞‚ùå', callback_data=str(call.from_user.id)+'cancelshop')
            forward = types.InlineKeyboardButton('‚Üí', callback_data=str(call.from_user.id)+'carstandart')

            cursor.execute(f'''select all_user_cars from user_data
            where user_id = {call.from_user.id}''')
            x[call.from_user.id] = cursor.fetchall()

            all_car_tags[call.from_user.id] = x[call.from_user.id][0][0].split()


            cursor.execute(f'''select car_tag from car_balance
            where check_exclusive is NULL and tier = 1
            order by cost ''')
            y[call.from_user.id] = cursor.fetchall()

            all_car_tags_shop[call.from_user.id] = []


            for i[call.from_user.id] in y[call.from_user.id]:
                all_car_tags_shop[call.from_user.id].append(i[call.from_user.id][0])

            for i[call.from_user.id] in all_car_tags[call.from_user.id]:
                if i[call.from_user.id] in all_car_tags_shop[call.from_user.id]:
                    all_car_tags_shop[call.from_user.id].remove(i[call.from_user.id])

            all_cars_shop[call.from_user.id] = []
            all_cars_cost[call.from_user.id] = []
            for i[call.from_user.id] in all_car_tags_shop[call.from_user.id]:
                cursor.execute(f'''select car_name, cost from car_balance
                where car_tag = "{i[call.from_user.id]}"''')
                y[call.from_user.id] = cursor.fetchall()
                all_cars_shop[call.from_user.id].append(y[call.from_user.id][0][0])
                all_cars_cost[call.from_user.id].append(y[call.from_user.id][0][1])
                cursor.fetchall()



            for i[call.from_user.id] in range(len(all_car_tags_shop[call.from_user.id])):
                murkup.add(types.InlineKeyboardButton(f'{all_cars_shop[call.from_user.id][i[call.from_user.id]]} ‚û° {all_cars_cost[call.from_user.id][i[call.from_user.id]]}üí∞' , callback_data=str(call.from_user.id)+all_car_tags_shop[call.from_user.id][i[call.from_user.id]]+'shop'))
            murkup.add(forward, cancel)

            bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.id, text = '<i>–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—à–∏–Ω—ã –∫–ª–∞—Å—Å–∞ "–≠–∫–æ–Ω–æ–º" ‚è¨</i>', parse_mode='html' ,reply_markup=murkup)

        elif call.data == str(call.from_user.id)+'carstandart':
            murkup.row_width = 1
            cancel = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞‚ùå', callback_data=str(call.from_user.id)+'cancelshop')
            back = types.InlineKeyboardButton('‚Üê', callback_data=str(call.from_user.id)+'careco')
            forward  = types.InlineKeyboardButton('‚Üí', callback_data=str(call.from_user.id)+'carcomfort')


            cursor.execute(f'''select all_user_cars from user_data
            where user_id = {call.from_user.id}''')
            x[call.from_user.id] = cursor.fetchall()

            all_car_tags[call.from_user.id] = x[call.from_user.id][0][0].split()


            cursor.execute(f'''select car_tag from car_balance
            where check_exclusive is NULL and tier = 2
            order by cost ''')
            y[call.from_user.id] = cursor.fetchall()

            all_car_tags_shop[call.from_user.id] = []


            for i[call.from_user.id] in y[call.from_user.id]:
                all_car_tags_shop[call.from_user.id].append(i[call.from_user.id][0])

            for i[call.from_user.id] in all_car_tags[call.from_user.id]:
                if i[call.from_user.id] in all_car_tags_shop[call.from_user.id]:
                    all_car_tags_shop[call.from_user.id].remove(i[call.from_user.id])

            all_cars_shop[call.from_user.id] = []
            all_cars_cost[call.from_user.id] = []
            for i[call.from_user.id] in all_car_tags_shop[call.from_user.id]:
                cursor.execute(f'''select car_name, cost from car_balance
                where car_tag = "{i[call.from_user.id]}"''')
                y[call.from_user.id] = cursor.fetchall()
                all_cars_shop[call.from_user.id].append(y[call.from_user.id][0][0])
                all_cars_cost[call.from_user.id].append(y[call.from_user.id][0][1])
                cursor.fetchall()



            for i[call.from_user.id] in range(len(all_car_tags_shop[call.from_user.id])):
                murkup.add(types.InlineKeyboardButton(f'{all_cars_shop[call.from_user.id][i[call.from_user.id]]} ‚û° {all_cars_cost[call.from_user.id][i[call.from_user.id]]}üí∞' , callback_data=str(call.from_user.id)+all_car_tags_shop[call.from_user.id][i[call.from_user.id]]+'shop'))
            
            murkup.row_width = 2
            murkup.add(back, forward)
            murkup.row_width = 1
            murkup.add(cancel)

            bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.id, text = '<i>–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—à–∏–Ω—ã –∫–ª–∞—Å—Å–∞ "–°—Ç–∞–Ω–¥–∞—Ä—Ç" ‚è¨ </i>', parse_mode='html' ,reply_markup=murkup)

        elif call.data == str(call.from_user.id)+'carcomfort':
            murkup.row_width = 1
            cancel = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞‚ùå', callback_data=str(call.from_user.id)+'cancelshop')
            back = types.InlineKeyboardButton('‚Üê', callback_data=str(call.from_user.id)+'carstandart')
            forward  = types.InlineKeyboardButton('‚Üí', callback_data=str(call.from_user.id)+'carbusiness')


            cursor.execute(f'''select all_user_cars from user_data
            where user_id = {call.from_user.id}''')
            x[call.from_user.id] = cursor.fetchall()

            all_car_tags[call.from_user.id] = x[call.from_user.id][0][0].split()


            cursor.execute(f'''select car_tag from car_balance
            where check_exclusive is NULL and tier = 3
            order by cost ''')
            y[call.from_user.id] = cursor.fetchall()

            all_car_tags_shop[call.from_user.id] = []


            for i[call.from_user.id] in y[call.from_user.id]:
                all_car_tags_shop[call.from_user.id].append(i[call.from_user.id][0])

            for i[call.from_user.id] in all_car_tags[call.from_user.id]:
                if i[call.from_user.id] in all_car_tags_shop[call.from_user.id]:
                    all_car_tags_shop[call.from_user.id].remove(i[call.from_user.id])

            all_cars_shop[call.from_user.id] = []
            all_cars_cost[call.from_user.id] = []
            for i[call.from_user.id] in all_car_tags_shop[call.from_user.id]:
                cursor.execute(f'''select car_name, cost from car_balance
                where car_tag = "{i[call.from_user.id]}"''')
                y[call.from_user.id] = cursor.fetchall()
                all_cars_shop[call.from_user.id].append(y[call.from_user.id][0][0])
                all_cars_cost[call.from_user.id].append(y[call.from_user.id][0][1])
                cursor.fetchall()



            for i[call.from_user.id] in range(len(all_car_tags_shop[call.from_user.id])):
                murkup.add(types.InlineKeyboardButton(f'{all_cars_shop[call.from_user.id][i[call.from_user.id]]} ‚û° {all_cars_cost[call.from_user.id][i[call.from_user.id]]}üí∞' , callback_data=str(call.from_user.id)+all_car_tags_shop[call.from_user.id][i[call.from_user.id]]+'shop'))
            
            murkup.row_width = 2
            murkup.add(back, forward)
            murkup.row_width = 1
            murkup.add(cancel)

            bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.id, text = '<i>–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—à–∏–Ω—ã –∫–ª–∞—Å—Å–∞ "–ö–æ–º—Ñ–æ—Ä—Ç" ‚è¨</i>', parse_mode='html' ,reply_markup=murkup)

        elif call.data == str(call.from_user.id)+'carbusiness':
            murkup.row_width = 1
            cancel = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞‚ùå', callback_data=str(call.from_user.id)+'cancelshop')
            back = types.InlineKeyboardButton('‚Üê', callback_data=str(call.from_user.id)+'carcomfort')
            forward  = types.InlineKeyboardButton('‚Üí', callback_data=str(call.from_user.id)+'carpremium')


            cursor.execute(f'''select all_user_cars from user_data
            where user_id = {call.from_user.id}''')
            x[call.from_user.id] = cursor.fetchall()

            all_car_tags[call.from_user.id] = x[call.from_user.id][0][0].split()


            cursor.execute(f'''select car_tag from car_balance
            where check_exclusive is NULL and tier = 4
            order by cost ''')
            y[call.from_user.id] = cursor.fetchall()

            all_car_tags_shop[call.from_user.id] = []


            for i[call.from_user.id] in y[call.from_user.id]:
                all_car_tags_shop[call.from_user.id].append(i[call.from_user.id][0])

            for i[call.from_user.id] in all_car_tags[call.from_user.id]:
                if i[call.from_user.id] in all_car_tags_shop[call.from_user.id]:
                    all_car_tags_shop[call.from_user.id].remove(i[call.from_user.id])

            all_cars_shop[call.from_user.id] = []
            all_cars_cost[call.from_user.id] = []
            for i[call.from_user.id] in all_car_tags_shop[call.from_user.id]:
                cursor.execute(f'''select car_name, cost from car_balance
                where car_tag = "{i[call.from_user.id]}"''')
                y[call.from_user.id] = cursor.fetchall()
                all_cars_shop[call.from_user.id].append(y[call.from_user.id][0][0])
                all_cars_cost[call.from_user.id].append(y[call.from_user.id][0][1])
                cursor.fetchall()



            for i[call.from_user.id] in range(len(all_car_tags_shop[call.from_user.id])):
                murkup.add(types.InlineKeyboardButton(f'{all_cars_shop[call.from_user.id][i[call.from_user.id]]} ‚û° {all_cars_cost[call.from_user.id][i[call.from_user.id]]}üí∞' , callback_data=str(call.from_user.id)+all_car_tags_shop[call.from_user.id][i[call.from_user.id]]+'shop'))
            
            murkup.row_width = 2
            murkup.add(back, forward)
            murkup.row_width = 1
            murkup.add(cancel)

            bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.id, text = '<i>–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—à–∏–Ω—ã –∫–ª–∞—Å—Å–∞ "–ë–∏–∑–Ω–µ—Å" ‚è¨</i>', parse_mode='html' ,reply_markup=murkup)
        
        elif call.data == str(call.from_user.id)+'carpremium':
            murkup.row_width = 1
            cancel = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞‚ùå', callback_data=str(call.from_user.id)+'cancelshop')
            back = types.InlineKeyboardButton('‚Üê', callback_data=str(call.from_user.id)+'carbusiness')
            forward  = types.InlineKeyboardButton('‚Üí', callback_data=str(call.from_user.id)+'carelit')


            cursor.execute(f'''select all_user_cars from user_data
            where user_id = {call.from_user.id}''')
            x[call.from_user.id] = cursor.fetchall()

            all_car_tags[call.from_user.id] = x[call.from_user.id][0][0].split()


            cursor.execute(f'''select car_tag from car_balance
            where check_exclusive is NULL and tier = 5
            order by cost ''')
            y[call.from_user.id] = cursor.fetchall()

            all_car_tags_shop[call.from_user.id] = []


            for i[call.from_user.id] in y[call.from_user.id]:
                all_car_tags_shop[call.from_user.id].append(i[call.from_user.id][0])

            for i[call.from_user.id] in all_car_tags[call.from_user.id]:
                if i[call.from_user.id] in all_car_tags_shop[call.from_user.id]:
                    all_car_tags_shop[call.from_user.id].remove(i[call.from_user.id])

            all_cars_shop[call.from_user.id] = []
            all_cars_cost[call.from_user.id] = []
            for i[call.from_user.id] in all_car_tags_shop[call.from_user.id]:
                cursor.execute(f'''select car_name, cost from car_balance
                where car_tag = "{i[call.from_user.id]}"''')
                y[call.from_user.id] = cursor.fetchall()
                all_cars_shop[call.from_user.id].append(y[call.from_user.id][0][0])
                all_cars_cost[call.from_user.id].append(y[call.from_user.id][0][1])
                cursor.fetchall()



            for i[call.from_user.id] in range(len(all_car_tags_shop[call.from_user.id])):
                murkup.add(types.InlineKeyboardButton(f'{all_cars_shop[call.from_user.id][i[call.from_user.id]]} ‚û° {all_cars_cost[call.from_user.id][i[call.from_user.id]]}üí∞' , callback_data=str(call.from_user.id)+all_car_tags_shop[call.from_user.id][i[call.from_user.id]]+'shop'))
            
            murkup.row_width = 2
            murkup.add(back, forward)
            murkup.row_width = 1
            murkup.add(cancel)

            bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.id, text = '<i>–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≤—Ç–æ –∫–ª–∞—Å—Å–∞ "–ü—Ä–µ–º–∏—É–º" ‚è¨</i>', parse_mode='html' ,reply_markup=murkup)

        elif call.data == str(call.from_user.id)+'carcomfort':
            murkup.row_width = 1
            cancel = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞‚ùå', callback_data=str(call.from_user.id)+'cancelshop')
            back = types.InlineKeyboardButton('‚Üê', callback_data=str(call.from_user.id)+'carstandart')
            forward  = types.InlineKeyboardButton('‚Üí', callback_data=str(call.from_user.id)+'carbusiness')


            cursor.execute(f'''select all_user_cars from user_data
            where user_id = {call.from_user.id}''')
            x[call.from_user.id] = cursor.fetchall()

            all_car_tags[call.from_user.id] = x[call.from_user.id][0][0].split()


            cursor.execute(f'''select car_tag from car_balance
            where check_exclusive is NULL and tier = 3
            order by cost ''')
            y[call.from_user.id] = cursor.fetchall()

            all_car_tags_shop[call.from_user.id] = []


            for i[call.from_user.id] in y[call.from_user.id]:
                all_car_tags_shop[call.from_user.id].append(i[call.from_user.id][0])

            for i[call.from_user.id] in all_car_tags[call.from_user.id]:
                if i[call.from_user.id] in all_car_tags_shop[call.from_user.id]:
                    all_car_tags_shop[call.from_user.id].remove(i[call.from_user.id])

            all_cars_shop[call.from_user.id] = []
            all_cars_cost[call.from_user.id] = []
            for i[call.from_user.id] in all_car_tags_shop[call.from_user.id]:
                cursor.execute(f'''select car_name, cost from car_balance
                where car_tag = "{i[call.from_user.id]}"''')
                y[call.from_user.id] = cursor.fetchall()
                all_cars_shop[call.from_user.id].append(y[call.from_user.id][0][0])
                all_cars_cost[call.from_user.id].append(y[call.from_user.id][0][1])
                cursor.fetchall()



            for i[call.from_user.id] in range(len(all_car_tags_shop[call.from_user.id])):
                murkup.add(types.InlineKeyboardButton(f'{all_cars_shop[call.from_user.id][i[call.from_user.id]]} ‚û° {all_cars_cost[call.from_user.id][i[call.from_user.id]]}üí∞' , callback_data=str(call.from_user.id)+all_car_tags_shop[call.from_user.id][i[call.from_user.id]]+'shop'))
            
            murkup.row_width = 2
            murkup.add(back, forward)
            murkup.row_width = 1
            murkup.add(cancel)

            bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.id, text = '<i>–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—à–∏–Ω—ã –∫–ª–∞—Å—Å–∞ "–ë–∏–∑–Ω–µ—Å" ‚è¨ </i>', parse_mode='html' ,reply_markup=murkup)

        elif call.data == str(call.from_user.id)+'carelit':
            murkup.row_width = 1
            cancel = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞‚ùå', callback_data=str(call.from_user.id)+'cancelshop')
            back = types.InlineKeyboardButton('‚Üê', callback_data=str(call.from_user.id)+'carpremium')

            cursor.execute(f'''select all_user_cars from user_data
            where user_id = {call.from_user.id}''')
            x[call.from_user.id] = cursor.fetchall()

            all_car_tags[call.from_user.id] = x[call.from_user.id][0][0].split()


            cursor.execute(f'''select car_tag from car_balance
            where check_exclusive is NULL and tier = 6
            order by cost ''')
            y[call.from_user.id] = cursor.fetchall()

            all_car_tags_shop[call.from_user.id] = []


            for i[call.from_user.id] in y[call.from_user.id]:
                all_car_tags_shop[call.from_user.id].append(i[call.from_user.id][0])

            for i[call.from_user.id] in all_car_tags[call.from_user.id]:
                if i[call.from_user.id] in all_car_tags_shop[call.from_user.id]:
                    all_car_tags_shop[call.from_user.id].remove(i[call.from_user.id])

            all_cars_shop[call.from_user.id] = []
            all_cars_cost[call.from_user.id] = []
            for i[call.from_user.id] in all_car_tags_shop[call.from_user.id]:
                cursor.execute(f'''select car_name, cost from car_balance
                where car_tag = "{i[call.from_user.id]}"''')
                y[call.from_user.id] = cursor.fetchall()
                all_cars_shop[call.from_user.id].append(y[call.from_user.id][0][0])
                all_cars_cost[call.from_user.id].append(y[call.from_user.id][0][1])
                cursor.fetchall()



            for i[call.from_user.id] in range(len(all_car_tags_shop[call.from_user.id])):
                murkup.add(types.InlineKeyboardButton(f'{all_cars_shop[call.from_user.id][i[call.from_user.id]]} ‚û° {all_cars_cost[call.from_user.id][i[call.from_user.id]]}üí∞' , callback_data=str(call.from_user.id)+all_car_tags_shop[call.from_user.id][i[call.from_user.id]]+'shop'))
            murkup.add(back, cancel)

            bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.id, text = '<i>–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—à–∏–Ω—ã –∫–ª–∞—Å—Å–∞ "–≠–ª–∏—Ç" ‚è¨</i>', parse_mode='html' ,reply_markup=murkup)


        elif call.data == str(call.from_user.id)+'casesshop':
            murkup = types.InlineKeyboardMarkup(row_width=1)
            cancel = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞‚ùå', callback_data=str(call.from_user.id)+'cancelshop')
            back = types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è', callback_data=str(call.from_user.id)+'startshop')

            cursor.execute('''select case_tag, case_name, cost from cases
            where checker is NULL
            order by cost''')
            x[call.from_user.id] = cursor.fetchall()

            for i[call.from_user.id] in x[call.from_user.id]:
                murkup.add(types.InlineKeyboardButton(f'{i[call.from_user.id][1]} ‚û° {i[call.from_user.id][2]}üí∞', callback_data=str(call.from_user.id)+i[call.from_user.id][0]+'caseshop'))
            murkup.add(back, cancel)
            bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.id, text = '<b>–í—Å–µ –∫–µ–π—Å—ã</b> üß∞', parse_mode='html', reply_markup=murkup)



        cursor.execute('select cost, give from donate')
        x[call.from_user.id] = cursor.fetchall()

        for i[call.from_user.id] in x[call.from_user.id]:
            if call.data == str(i[call.from_user.id][0]):
                buy = types.InlineKeyboardButton('–ö—É–ø–∏—Ç—å‚úÖ', callback_data=str(i[call.from_user.id][0])+'don')
                back = types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è', callback_data=str(call.from_user.id)+'startdon')
                cancel = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞‚ùå', callback_data='canceldon')
                murkup.add(buy, back, cancel)

                bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.id, text = f'–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å {i[call.from_user.id][1]} {creditto(i[call.from_user.id][1])}"ü§î \n \n–¶–µ–Ω–∞: <b>{i[call.from_user.id][0]}‚ÇΩ</b>', parse_mode='html', reply_markup=murkup)
            elif call.data == str(i[call.from_user.id][0])+'don':

                quickpay[call.from_user.id] = Quickpay(
                receiver=cfg.number,
                quickpay_form="shop",
                targets=f'–ü–æ–∫—É–ø–∫–∞ "{i[call.from_user.id][1]} {creditto(i[call.from_user.id][1])}"',
                paymentType="SB",
                sum=i[call.from_user.id][0],
                label=str(call.from_user.id)+str(i[call.from_user.id][0]))

                try:
                    pay = types.InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ üí≤', url=quickpay[call.from_user.id].redirected_url)
                    checker = types.InlineKeyboardButton('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å üåÄ', callback_data=str(i[call.from_user.id][0])+'ck')
                    cancelstore = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞ ‚ùå', callback_data='canceldon')

                    murkup.add(pay, checker, cancelstore)
                    bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.id, text = f'<i><b>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞</b></i> \n \n<b>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ</b> \n \n–ö–æ–≥–¥–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–æ–π–¥–µ—Ç —É—Å–ø–µ—à–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å', parse_mode='html', reply_markup=murkup)
                except:
                    bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.id, text = f'<i>–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫</i> \n \n<u>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑</u>', parse_mode='html', reply_markup=murkup)
                break
            elif call.data == str(i[call.from_user.id][0])+'ck':
                check_don[call.from_user.id] = 0
                history[call.from_user.id] = client.operation_history(label=str(call.from_user.id)+str(i[call.from_user.id][0]))

                for operation[call.from_user.id] in history[call.from_user.id].operations:
                    cursor.execute(f'''select donation_valute, operation_id from user_data
                    where user_id = {call.from_user.id}''')
                    y[call.from_user.id] = cursor.fetchall()

                    if operation[call.from_user.id].status == 'success' and not (str(operation[call.from_user.id].operation_id) in str(y[call.from_user.id][0][1])):
                        cursor.execute(f'''update user_data
                        set donation_valute = {y[call.from_user.id][0][0] + i[call.from_user.id][1]},
                        operation_id = "{str(y[call.from_user.id][0][1])+' '+str(operation[call.from_user.id].operation_id)}"
                        where user_id = {call.from_user.id}''')
                        connection.commit()

                        bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.id, text = f'<i><b>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞</b></i> \n \n–í—ã –ø–æ–ª—É—á–∏–ª–∏ <b>{i[call.from_user.id][1]}</b> {creditto(i[call.from_user.id][1])}', parse_mode='html', reply_markup=murkup)
                        
                        cursor.execute(f'insert into logs(first_name, username, user_id, chat_id, time, command, logs) values("{call.from_user.first_name}", "{call.from_user.username}", {call.from_user.id}, NULL, "{datetime.now()}", "donation", "pay to {i[call.from_user.id][0]}")')
                        connection.commit()

                        bot.send_message(1372984331, f'–ù–û–í–´–ô –î–û–ù–ê–¢ \n–ö—É–ø–∏–ª–∏ {i[call.from_user.id][1]}kr –∑–∞ {i[call.from_user.id][0]}—Ä, {call.from_user.username} {call.from_user.id}')

                        check_don[call.from_user.id] = 1
                        num_don[call.from_user.id] = 0
                        break

                if check_don[call.from_user.id] == 0:
                    try:
                        pay = types.InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ üí≤', url=quickpay[call.from_user.id].redirected_url)
                        checker = types.InlineKeyboardButton('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å üåÄ', callback_data=str(i[call.from_user.id][0])+'ck')
                        cancelstore = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞ ‚ùå', callback_data='canceldon')
                                    
                        bot.delete_message(chat_id = call.message.chat.id, message_id = call.message.id)
                        murkup.add(pay, checker, cancelstore)
                        bot.send_message(call.from_user.id,'<i><b>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞</b></i> \n \n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–ø–ª–∞—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑', parse_mode='html', reply_markup=murkup)
                    except:
                        bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.id, text = f'<i>–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫</i> \n \n<u>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑</u>', parse_mode='html', reply_markup=murkup)
                
                break


        cursor.execute('select pack_tag, pack_name, cost, what_give, car_give, coin_give, case_give from store')
        x[call.from_user.id] = cursor.fetchall()
        
        for i[call.from_user.id] in x[call.from_user.id]:
            if call.data == str(call.from_user.id) + i[call.from_user.id][0]+'prestore':
                buy = types.InlineKeyboardButton('–ö—É–ø–∏—Ç—å‚úÖ', callback_data=str(call.from_user.id)+i[call.from_user.id][0]+'storebuy')
                back = types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è', callback_data=str(call.from_user.id)+'startstore')
                cancel = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞‚ùå', callback_data=str(call.from_user.id)+'cancelstore')

                if not i[call.from_user.id][4] is None:
                    cursor.execute(f'''select all_user_buy_actions from user_data
                    where user_id = "{call.from_user.id}"''')
                    y[call.from_user.id] = cursor.fetchall()
                    if i[call.from_user.id][0] in y[call.from_user.id][0][0]:
                        bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.id, text = f'<i>–î–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –∫ –ø–æ–∫—É–ø–∫–µ –≤—Ç–æ—Ä–æ–π —Ä–∞–∑ ‚ù§Ô∏è</i>', parse_mode='html', reply_markup=murkup)
                        break
                        

                pr_store[call.from_user.id] = ''
                if not i[call.from_user.id][4] is None:
                    cursor.execute(f'''select car_name from car_balance
                    where car_tag = "{i[call.from_user.id][4]}"''')
                    y[call.from_user.id] = cursor.fetchall()

                    pr_store[call.from_user.id] += f'–∞–≤—Ç–æ <b>{y[call.from_user.id][0][0]}</b>'
                if not i[call.from_user.id][5] is None:
                    if pr_store[call.from_user.id] == '':
                        pr_store[call.from_user.id] += f'<b>{i[call.from_user.id][5]} {cointo(i[call.from_user.id][5])}</b>'
                    else:
                        pr_store[call.from_user.id] += f', <b>{i[call.from_user.id][5]} {cointo(i[call.from_user.id][5])}</b>'
                if not i[call.from_user.id][6] is None:
                    cursor.execute(f'''select case_name from cases
                    where case_tag = "{i[call.from_user.id][6]}"''')
                    y[call.from_user.id] = cursor.fetchall()
                    if pr_store[call.from_user.id] == '':
                        pr_store[call.from_user.id] += f'–∫–µ–π—Å <b>"{y[call.from_user.id][0][0]}"</b>'
                    else:
                        pr_store[call.from_user.id] += f', –∫–µ–π—Å <b>"{y[call.from_user.id][0][0]}"</b>'
                
                if not i[call.from_user.id][4] is None:
                    cursor.execute(f'''select min_step, max_step, kef_coin from car_balance
                    where car_tag = "{i[call.from_user.id][4]}"''')
                    y[call.from_user.id] = cursor.fetchall()

                    pr_store[call.from_user.id] += f'\n \n–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ: \n1. –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥: <b>{y[call.from_user.id][0][0]}</b> \n2. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥: <b>{y[call.from_user.id][0][1]}</b> \n3. –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ–∏–Ω–æ–≤: <b>{y[call.from_user.id][0][2]}</b> \n'

                if not i[call.from_user.id][6] is None:
                    cursor.execute(f'''select all_cars, cars_chance, all_coins, coins_chance, all_valutes, valutes_chance from cases
                    where case_tag = "{i[call.from_user.id][6]}"''')
                    y[call.from_user.id] = cursor.fetchall()

                    p[call.from_user.id] = ''

                    if not y[call.from_user.id][0][0] is None:
                        chance[call.from_user.id] = y[call.from_user.id][0][1].split()
                        what_chance[call.from_user.id] = y[call.from_user.id][0][0].split()
        
                        for a[call.from_user.id] in range(len(chance[call.from_user.id])):
                            cursor.execute(f'''select car_name from car_balance
                            where car_tag = "{what_chance[call.from_user.id][a[call.from_user.id]]}"''')
                            z[call.from_user.id] = cursor.fetchall()
                            if int(float(chance[call.from_user.id][a[call.from_user.id]])*100) == float(chance[call.from_user.id][a[call.from_user.id]])*100:
                                p[call.from_user.id] += f'‚Ä¢ <b>{z[call.from_user.id][0][0]} - {int(float(chance[call.from_user.id][a[call.from_user.id]])*100)}% \n</b>'
                            else:
                                p[call.from_user.id] += f'‚Ä¢ <b>{z[call.from_user.id][0][0]} - {float(chance[call.from_user.id][a[call.from_user.id]])*100}% \n</b>'

                    if not y[call.from_user.id][0][2] is None:
                        chance[call.from_user.id] = y[call.from_user.id][0][3].split()
                        what_chance[call.from_user.id] = y[call.from_user.id][0][2].split()
                            
                        for a[call.from_user.id] in range(len(chance[call.from_user.id])):
                            if int(float(chance[call.from_user.id][a[call.from_user.id]])*100) == float(chance[call.from_user.id][a[call.from_user.id]])*100:
                                p[call.from_user.id] += f'‚Ä¢ <b>–û—Ç {what_chance[call.from_user.id][a[call.from_user.id]].split("-")[0]} –¥–æ {what_chance[call.from_user.id][a[call.from_user.id]].split("-")[1]} –∫–æ–∏–Ω–æ–≤ - {int(float(chance[call.from_user.id][a[call.from_user.id]])*100)}% \n</b>'
                            else:
                                p[call.from_user.id] += f'‚Ä¢ <b>–û—Ç {what_chance[call.from_user.id][a[call.from_user.id]].split("-")[0]} –¥–æ {what_chance[call.from_user.id][a[call.from_user.id]].split("-")[1]} –∫–æ–∏–Ω–æ–≤ - {float(chance[call.from_user.id][a[call.from_user.id]])*100}% \n</b>'

                    if not y[call.from_user.id][0][4] is None:
                        chance[call.from_user.id] = y[call.from_user.id][0][5].split()
                        what_chance[call.from_user.id] = y[call.from_user.id][0][4].split()
                        
                        for a[call.from_user.id] in range(len(chance[call.from_user.id])):
                            if int(float(chance[call.from_user.id][a[call.from_user.id]])*100) == float(chance[call.from_user.id][a[call.from_user.id]])*100:
                                p[call.from_user.id] += f'‚Ä¢ <b>–û—Ç {what_chance[call.from_user.id][a[call.from_user.id]].split("+")[0]} –¥–æ {what_chance[call.from_user.id][a[call.from_user.id]].split("+")[1]} –∫—Ä–µ–¥–∏—Ç–æ–≤ - {int(float(chance[call.from_user.id][a[call.from_user.id]])*100)}% \n</b>'
                            else:
                                p[call.from_user.id] += f'‚Ä¢ <b>–û—Ç {what_chance[call.from_user.id][a[call.from_user.id]].split("+")[0]} –¥–æ {what_chance[call.from_user.id][a[call.from_user.id]].split("+")[1]} –∫—Ä–µ–¥–∏—Ç–æ–≤ - {float(chance[call.from_user.id][a[call.from_user.id]])*100}% \n</b>'

                    pr_store[call.from_user.id] +=f'\n \n<i>–®–∞–Ω—Å—ã –≤—ã–ø–∞–¥–µ–Ω–∏—è:</i> \n{p[call.from_user.id]}'


                murkup.add(buy, back, cancel)
                bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.id, text = f'–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è <b>"{i[call.from_user.id][1]}"</b>?ü§î \n \n–í—ã –ø–æ–ª—É—á–∏—Ç–µ: {pr_store[call.from_user.id]} \n–¶–µ–Ω–∞: <b>{i[call.from_user.id][2]} {creditto(i[call.from_user.id][2])}</b>', parse_mode='html', reply_markup=murkup)
                break

            elif call.data == str(call.from_user.id)+i[call.from_user.id][0]+'storebuy':

                cursor.execute(f'''select all_user_buy_actions, donation_valute from user_data
                where user_id = {call.from_user.id}''')
                y[call.from_user.id] = cursor.fetchall()

                if y[call.from_user.id][0][1] < i[call.from_user.id][2]:
                    bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.id, text = f'''–í–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –Ω–∞ –ø–æ–∫—É–ø–∫—É ü§°<i>
                    \n{i[call.from_user.id][1]}</i> <b>{i[call.from_user.id][2] - y[call.from_user.id][0][1]}</b> {creditto(i[call.from_user.id][2] - y[call.from_user.id][0][1])}''', parse_mode='html')
                    break

                if i[call.from_user.id][3] == 1 or (i[call.from_user.id][3] == 3 and not i[call.from_user.id][4] is None):
                    if i[call.from_user.id][0] in y[call.from_user.id][0][0]:
                        bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.id, text = f'<b>–í—ã —É–∂–µ –∫—É–ø–∏–ª–∏ —ç—Ç—É –∞–∫—Ü–∏—é ‚ù§Ô∏è</b>', parse_mode='html')
                        break

                if i[call.from_user.id][3] == 1:    
                    cursor.execute(f'''select all_user_cars from user_data
                    where user_id = {call.from_user.id}''')
                    z[call.from_user.id] = cursor.fetchall()

                    cursor.execute(f'''update user_data
                    set all_user_cars = "{z[call.from_user.id][0][0]+' '+i[call.from_user.id][4]}",
                    all_user_buy_actions = "{y[call.from_user.id][0][0]+' '+i[call.from_user.id][0]}",
                    donation_valute = {y[call.from_user.id][0][1] - i[call.from_user.id][2]}
                    where user_id = {call.from_user.id}''')
                    connection.commit()

                elif i[call.from_user.id][3] == 2:
                    cursor.execute(f'''select user_balance from user_data
                    where user_id = {call.from_user.id}''')
                    z[call.from_user.id] = cursor.fetchall()

                    cursor.execute(f'''update user_data
                    set user_balance = {z[call.from_user.id][0][0] + i[call.from_user.id][5]},
                    all_user_buy_actions = "{y[call.from_user.id][0][0]+' '+i[call.from_user.id][0]}",
                    donation_valute = {y[call.from_user.id][0][1] - i[call.from_user.id][2]}
                    where user_id = {call.from_user.id}''')
                    connection.commit()

                elif i[call.from_user.id][3] == 3:
                    cursor.execute(f'''select all_user_cases from user_data
                    where user_id = {call.from_user.id}''')
                    z[call.from_user.id] = cursor.fetchall()

                    if i[call.from_user.id][6]+'+' in z[call.from_user.id][0][0]:
                        all_case_tags[call.from_user.id] = z[call.from_user.id][0][0].split()

                        for a[call.from_user.id] in range (len(all_case_tags[call.from_user.id])):
                            if all_case_tags[call.from_user.id][a[call.from_user.id]].split('+')[0] == i[call.from_user.id][6]:
                                all_case_tags[call.from_user.id][a[call.from_user.id]] = all_case_tags[call.from_user.id][a[call.from_user.id]].split('+')[0]+'+'+str(int(all_case_tags[call.from_user.id][a[call.from_user.id]].split('+')[1])+1)
                                break
                        cursor.execute(f'''update user_data
                        set all_user_cases = "{' '.join(all_case_tags[call.from_user.id])}",
                        all_user_buy_actions = "{y[call.from_user.id][0][0]+' '+i[call.from_user.id][0]}",
                        donation_valute = {y[call.from_user.id][0][1] - i[call.from_user.id][2]}
                        where user_id = {call.from_user.id}''')
                        connection.commit()
                    else:        
                        cursor.execute(f'''update user_data
                        set all_user_cases = "{z[call.from_user.id][0][0]+' '+i[call.from_user.id][6]+'+1'}",
                        all_user_buy_actions = "{y[call.from_user.id][0][0]+' '+i[call.from_user.id][0]}",
                        donation_valute = {y[call.from_user.id][0][1] - i[call.from_user.id][2]}
                        where user_id = {call.from_user.id}''')
                        connection.commit()

                
                elif i[call.from_user.id][3] == 4:
                    cursor.execute(f'''select all_user_cars, user_balance, all_user_cases from user_data
                    where user_id = {call.from_user.id}''')
                    z[call.from_user.id] = cursor.fetchall()

                    if not i[call.from_user.id][4] is None:
                        cursor.execute(f'''update user_data
                        set all_user_cars = "{z[call.from_user.id][0][0]+' '+i[call.from_user.id][4]}"
                        where user_id = {call.from_user.id}''')
                        connection.commit()

                    if not i[call.from_user.id][5] is None:
                        cursor.execute(f'''update user_data
                        set user_balance = {z[call.from_user.id][0][1] + i[call.from_user.id][5]}
                        where user_id = {call.from_user.id}''')
                        connection.commit()

                    if not i[call.from_user.id][6] is None:
                        if i[call.from_user.id][6]+'+' in z[call.from_user.id][0][2]:
                            all_case_tags[call.from_user.id] = z[call.from_user.id][0][2].split()

                            for a[call.from_user.id] in range (len(all_case_tags[call.from_user.id])):
                                if all_case_tags[call.from_user.id][a[call.from_user.id]].split('+')[0] == i[call.from_user.id][6]:
                                    all_case_tags[call.from_user.id][a[call.from_user.id]] = all_case_tags[call.from_user.id][a[call.from_user.id]].split('+')[0]+'+'+str(int(all_case_tags[call.from_user.id][a[call.from_user.id]].split('+')[1])+1)
                                    break
                            cursor.execute(f'''update user_data
                            set all_user_cases = "{' '.join(all_case_tags[call.from_user.id])}",
                            all_user_buy_actions = "{y[call.from_user.id][0][0]+' '+i[call.from_user.id][0]}",
                            donation_valute = {y[call.from_user.id][0][1] - i[call.from_user.id][2]}
                            where user_id = {call.from_user.id}''')
                            connection.commit()
                        else:        
                            cursor.execute(f'''update user_data
                            set all_user_cases = "{z[call.from_user.id][0][2]+' '+i[call.from_user.id][6]+'+1'}",
                            all_user_buy_actions = "{y[call.from_user.id][0][0]+' '+i[call.from_user.id][0]}",
                            donation_valute = {y[call.from_user.id][0][1] - i[call.from_user.id][2]}
                            where user_id = {call.from_user.id}''')
                            connection.commit()
                        
                    cursor.execute(f'''update user_data
                    set all_user_buy_actions = "{y[call.from_user.id][0][0]+' '+i[call.from_user.id][0]}",
                    donation_valute = {y[call.from_user.id][0][1] - i[call.from_user.id][2]}
                    where user_id = {call.from_user.id}''')
                    connection.commit()

                bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.id, text = f'–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ –∞–∫—Ü–∏—é "<b>{i[call.from_user.id][1]}"</b> ‚úÖ \n \n–í–∞—à –±–∞–ª–∞–Ω—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: <b>{y[call.from_user.id][0][1] - i[call.from_user.id][2]}</b> {creditto(y[call.from_user.id][0][1] - i[call.from_user.id][2])}', parse_mode='html', reply_markup=murkup)      
                
                cursor.execute(f'insert into logs(first_name, username, user_id, chat_id, time, command, logs) values("{call.from_user.first_name}", "{call.from_user.username}", {call.from_user.id}, NULL, "{datetime.now()}", "buy", "take {i[call.from_user.id][0]}")')
                connection.commit()
                break

        cursor.execute('select case_tag, case_name, cost, all_cars, cars_chance, all_coins, coins_chance, all_valutes, valutes_chance, checker from cases')
        x[call.from_user.id] = cursor.fetchall()
        for i[call.from_user.id] in x[call.from_user.id]:
            if call.data == str(call.from_user.id)+i[call.from_user.id][0]+'caseshop':
                buy = types.InlineKeyboardButton('–ö—É–ø–∏—Ç—å –∫–µ–π—Å‚úÖ', callback_data=str(call.from_user.id)+i[call.from_user.id][0]+'casebuy')
                back = types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è', callback_data=str(call.from_user.id)+'casesshop')

                cancel = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞‚ùå', callback_data=str(call.from_user.id)+'cancelshop')


                if not i[call.from_user.id][3] is None:
                    chance[call.from_user.id] = i[call.from_user.id][4].split()
                    what_chance[call.from_user.id] = i[call.from_user.id][3].split()

                    p[call.from_user.id] = ''
                    for a[call.from_user.id] in range(len(chance[call.from_user.id])):
                        cursor.execute(f'''select car_name from car_balance
                        where car_tag = "{what_chance[call.from_user.id][a[call.from_user.id]]}"''')
                        y[call.from_user.id] = cursor.fetchall()

                        if int(float(chance[call.from_user.id][a[call.from_user.id]])*100) == float(chance[call.from_user.id][a[call.from_user.id]])*100:
                            p[call.from_user.id] += f'‚Ä¢ <b>{y[call.from_user.id][0][0]} - {int(float(chance[call.from_user.id][a[call.from_user.id]])*100)}% \n</b>'
                        else:
                            p[call.from_user.id] += f'‚Ä¢ <b>{y[call.from_user.id][0][0]} - {float(chance[call.from_user.id][a[call.from_user.id]])*100}% \n</b>'

                if not i[call.from_user.id][5] is None:
                    chance[call.from_user.id] = i[call.from_user.id][6].split()
                    what_chance[call.from_user.id] = i[call.from_user.id][5].split()
                    
                    for a[call.from_user.id] in range(len(chance[call.from_user.id])):
                        if int(float(chance[call.from_user.id][a[call.from_user.id]])*100) == float(chance[call.from_user.id][a[call.from_user.id]])*100:
                            p[call.from_user.id] += f'‚Ä¢ <b>–û—Ç {what_chance[call.from_user.id][a[call.from_user.id]].split("-")[0]} –¥–æ {what_chance[call.from_user.id][a[call.from_user.id]].split("-")[1]} –∫–æ–∏–Ω–æ–≤ - {int(float(chance[call.from_user.id][a[call.from_user.id]])*100)}% \n</b>'
                        else:
                            p[call.from_user.id] += f'‚Ä¢ <b>–û—Ç {what_chance[call.from_user.id][a[call.from_user.id]].split("-")[0]} –¥–æ {what_chance[call.from_user.id][a[call.from_user.id]].split("-")[1]} –∫–æ–∏–Ω–æ–≤ - {float(chance[call.from_user.id][a[call.from_user.id]])*100}% \n</b>'

                if not i[call.from_user.id][8] is None:
                    chance[call.from_user.id] = i[call.from_user.id][8].split()
                    what_chance[call.from_user.id] = i[call.from_user.id][7].split()
                    
                    for a[call.from_user.id] in range(len(chance[call.from_user.id])):
                        if int(float(chance[call.from_user.id][a[call.from_user.id]])*100) == float(chance[call.from_user.id][a[call.from_user.id]])*100:
                            p[call.from_user.id] += f'‚Ä¢ <b>–û—Ç {what_chance[call.from_user.id][a[call.from_user.id]].split("+")[0]} –¥–æ {what_chance[call.from_user.id][a[call.from_user.id]].split("+")[1]} –∫—Ä–µ–¥–∏—Ç–æ–≤ - {int(float(chance[call.from_user.id][a[call.from_user.id]])*100)}% \n</b>'
                        else:
                            p[call.from_user.id] += f'‚Ä¢ <b>–û—Ç {what_chance[call.from_user.id][a[call.from_user.id]].split("+")[0]} –¥–æ {what_chance[call.from_user.id][a[call.from_user.id]].split("+")[1]} –∫—Ä–µ–¥–∏—Ç–æ–≤ - {float(chance[call.from_user.id][a[call.from_user.id]])*100}% \n</b>'
                
                if not i[call.from_user.id][3] is None:
                    charactbuy =  types.InlineKeyboardButton('–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ üìú', callback_data=str(call.from_user.id)+i[call.from_user.id][0]+'charactbuy')
                    murkup.add(buy, charactbuy, back, cancel)
                else:
                    murkup.add(buy, back, cancel)
                bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.id, text = f'<u>–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å –∫–µ–π—Å?</u>ü§î \n<b>{i[call.from_user.id][1]}</b> \n \n<i>–¶–µ–Ω–∞:</i> <b>{i[call.from_user.id][2]}üè∑</b> \n \n<i>–®–∞–Ω—Å—ã –≤—ã–ø–∞–¥–µ–Ω–∏—è:</i> \n{p[call.from_user.id]}', parse_mode='html', reply_markup=murkup)
                break

            elif call.data == str(call.from_user.id)+i[call.from_user.id][0]+'charactbuy':

                buy = types.InlineKeyboardButton('–ö—É–ø–∏—Ç—å –∫–µ–π—Å‚úÖ', callback_data=str(call.from_user.id)+i[call.from_user.id][0]+'casebuy')
                back = types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è', callback_data=str(call.from_user.id)+'casesshop')
                backch = types.InlineKeyboardButton('–ù–∞–∑–∞–¥ –∫ —à–∞–Ω—Å–∞–º‚óÄ', callback_data=str(call.from_user.id)+i[call.from_user.id][0]+'caseshop')
                cancel = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞‚ùå', callback_data=str(call.from_user.id)+'cancelshop')

                all_car_tags[call.from_user.id] = i[call.from_user.id][3].split()
                p[call.from_user.id] = ''
                for a[call.from_user.id] in all_car_tags[call.from_user.id]:
                    cursor.execute(f'''select car_name, min_step, max_step, kef_coin from car_balance
                    where car_tag = "{a[call.from_user.id]}"''')
                    y[call.from_user.id] = cursor.fetchall()
                    p[call.from_user.id] += f'<b>{y[call.from_user.id][0][0]}</b> \n \n<i>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</i> \n1. –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥: <b>{y[call.from_user.id][0][1]}</b> \n2. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥: <b>{y[call.from_user.id][0][2]}</b> \n3. –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ–∏–Ω–æ–≤: <b>{y[call.from_user.id][0][3]}</b> \n \n'

                murkup.add(buy, backch, back, cancel)
                bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.id, text = f'<i>–í—Å–µ –º–∞—à–∏–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–ø–∞—Å—Ç—å —Å –∫–µ–π—Å–∞ üß∞</i> \n \n{p[call.from_user.id]}', parse_mode='html', reply_markup=murkup)
                break

            elif call.data == str(call.from_user.id)+i[call.from_user.id][0]+'casebuy':
                rebuy = types.InlineKeyboardButton('–ö—É–ø–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –∫–µ–π—Å ‚úÖ', callback_data=str(call.from_user.id)+i[call.from_user.id][0]+'caserebuy')

                cursor.execute(f'''select all_user_cases, user_balance from user_data
                where user_id = {call.from_user.id}''')
                y[call.from_user.id] = cursor.fetchall()

                if y[call.from_user.id][0][1] >= i[call.from_user.id][2]:

                    if i[call.from_user.id][0]+'+' in y[call.from_user.id][0][0]:
                        all_case_tags[call.from_user.id] = y[call.from_user.id][0][0].split()

                        for a[call.from_user.id] in range (len(all_case_tags[call.from_user.id])):
                            if all_case_tags[call.from_user.id][a[call.from_user.id]].split('+')[0] == i[call.from_user.id][0]:
                                all_case_tags[call.from_user.id][a[call.from_user.id]] = all_case_tags[call.from_user.id][a[call.from_user.id]].split('+')[0]+'+'+str(int(all_case_tags[call.from_user.id][a[call.from_user.id]].split('+')[1])+1)
                                break
                        cursor.execute(f'''update user_data
                        set all_user_cases = "{' '.join(all_case_tags[call.from_user.id])}",
                        user_balance = {y[call.from_user.id][0][1] - i[call.from_user.id][2]}
                        where user_id = {call.from_user.id}''')
                        connection.commit()
                    else:        
                        cursor.execute(f'''update user_data
                        set all_user_cases = "{y[call.from_user.id][0][0]+' '+i[call.from_user.id][0]+'+1'}",
                        user_balance = {y[call.from_user.id][0][1] - i[call.from_user.id][2]}
                        where user_id = {call.from_user.id}''')
                        connection.commit()

                    murkup.add(rebuy)
                    try:
                        b[call.from_user.id] = all_case_tags[call.from_user.id][a[call.from_user.id]].split('+')[1]
                    except:
                        b[call.from_user.id] = 1

                    buy_case[call.from_user] = f'''<b>–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ –∫–µ–π—Å</b> <i>{i[call.from_user.id][1]} <b>X{b[call.from_user.id]} üß∞</b></i> 
<u>–í—ã –º–æ–∂–µ—Ç–µ –µ–≥–æ –æ—Ç–∫—Ä—ã—Ç—å, –ø—Ä–æ–ø–∏—Å–∞–≤ –∫–æ–º–∞–Ω–¥—É /cases üîì</u>

–í–∞—à –±–∞–ª–∞–Ω—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç <b>{y[call.from_user.id][0][1] - i[call.from_user.id][2]}</b> {cointo(y[call.from_user.id][0][1] - i[call.from_user.id][2])}'''
                    cursor.execute(f'insert into logs(first_name, username, user_id, chat_id, time, command, logs) values("{call.from_user.first_name}", "{call.from_user.username}", {call.from_user.id}, NULL, "{datetime.now()}", "buy", "take {i[call.from_user.id][0]}")')
                    connection.commit()
                else:
                    buy_case[call.from_user] = f'''–í–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –Ω–∞ –ø–æ–∫—É–ø–∫—É ü§°
                    \n<i>{i[call.from_user.id][1]}</i> <b>{i[call.from_user.id][2] - y[call.from_user.id][0][1]}</b> {cointo(i[call.from_user.id][2] - y[call.from_user.id][0][1])}'''
                
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text=buy_case[call.from_user], parse_mode= 'html', reply_markup=murkup)  
                break

            elif call.data == str(call.from_user.id)+i[call.from_user.id][0]+'caserebuy':
                rebuy = types.InlineKeyboardButton('–ö—É–ø–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –∫–µ–π—Å ‚úÖ', callback_data=str(call.from_user.id)+i[call.from_user.id][0]+'caserebuy')

                cursor.execute(f'''select all_user_cases, user_balance from user_data
                where user_id = {call.from_user.id}''')
                y[call.from_user.id] = cursor.fetchall()

                if y[call.from_user.id][0][1] >= i[call.from_user.id][2]:

                    if i[call.from_user.id][0]+'+' in y[call.from_user.id][0][0]:
                        all_case_tags[call.from_user.id] = y[call.from_user.id][0][0].split()

                        for a[call.from_user.id] in range (len(all_case_tags[call.from_user.id])):
                            if all_case_tags[call.from_user.id][a[call.from_user.id]].split('+')[0] == i[call.from_user.id][0]:
                                all_case_tags[call.from_user.id][a[call.from_user.id]] = all_case_tags[call.from_user.id][a[call.from_user.id]].split('+')[0]+'+'+str(int(all_case_tags[call.from_user.id][a[call.from_user.id]].split('+')[1])+1)
                                break
                        cursor.execute(f'''update user_data
                        set all_user_cases = "{' '.join(all_case_tags[call.from_user.id])}",
                        user_balance = {y[call.from_user.id][0][1] - i[call.from_user.id][2]}
                        where user_id = {call.from_user.id}''')
                        connection.commit()
                    else:        
                        cursor.execute(f'''update user_data
                        set all_user_cases = "{y[call.from_user.id][0][0]+' '+i[call.from_user.id][0]+'+1'}",
                        user_balance = {y[call.from_user.id][0][1] - i[call.from_user.id][2]}
                        where user_id = {call.from_user.id}''')
                        connection.commit()

                    murkup.add(rebuy)
                    try:
                        b[call.from_user.id] = all_case_tags[call.from_user.id][a[call.from_user.id]].split('+')[1]
                    except:
                        b[call.from_user.id] = 1

                    buy_case[call.from_user] = f'''<b>–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ –∫–µ–π—Å</b> <i>{i[call.from_user.id][1]} <b>X{b[call.from_user.id]} üß∞</b></i> 
<u>–í—ã –º–æ–∂–µ—Ç–µ –µ–≥–æ –æ—Ç–∫—Ä—ã—Ç—å, –ø—Ä–æ–ø–∏—Å–∞–≤ –∫–æ–º–∞–Ω–¥—É /cases üîì</u>

<i>–í–∞—à –±–∞–ª–∞–Ω—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç <b>{y[call.from_user.id][0][1] - i[call.from_user.id][2]}</b> {cointo(y[call.from_user.id][0][1] - i[call.from_user.id][2])}</i>'''

                    bot.delete_message(chat_id = call.message.chat.id, message_id = call.message.id)
                    bot.send_message(call.message.chat.id, text=buy_case[call.from_user], parse_mode='html', reply_markup=murkup)
                    cursor.execute(f'insert into logs(first_name, username, user_id, chat_id, time, command, logs) values("{call.from_user.first_name}", "{call.from_user.username}", {call.from_user.id}, NULL, "{datetime.now()}", "buy", "take {i[call.from_user.id][0]}")')
                    connection.commit()

                else:
                    buy_case[call.from_user] = f'''–í–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –Ω–∞ –ø–æ–∫—É–ø–∫—É ü§°
                    \n–ö–µ–π—Å–∞ <i>{i[call.from_user.id][1]}</i> <b>{i[call.from_user.id][2] - y[call.from_user.id][0][1]}</b> {cointo(i[call.from_user.id][2] - y[call.from_user.id][0][1])}'''
                
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text=buy_case[call.from_user], parse_mode= 'html', reply_markup=murkup)  
                break

            elif call.data == str(call.from_user.id)+i[call.from_user.id][0]+'caseselect':
                opene = types.InlineKeyboardButton('–û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å ‚úÖ', callback_data=str(call.from_user.id)+i[call.from_user.id][0]+'caseopen')
                back = types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è', callback_data=str(call.from_user.id)+'startcases')
                cancel = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞‚ùå', callback_data=str(call.from_user.id)+'cancelcase')

                if not i[call.from_user.id][3] is None:
                    chance[call.from_user.id] = i[call.from_user.id][4].split()
                    what_chance[call.from_user.id] = i[call.from_user.id][3].split()

                p[call.from_user.id] = ''
                for a[call.from_user.id] in range(len(chance[call.from_user.id])):
                    cursor.execute(f'''select car_name from car_balance
                    where car_tag = "{what_chance[call.from_user.id][a[call.from_user.id]]}"''')
                    y[call.from_user.id] = cursor.fetchall()

                    if int(float(chance[call.from_user.id][a[call.from_user.id]])*100) == float(chance[call.from_user.id][a[call.from_user.id]])*100:
                        p[call.from_user.id] += f'‚Ä¢ <b>{y[call.from_user.id][0][0]} - {int(float(chance[call.from_user.id][a[call.from_user.id]])*100)}% \n</b>'
                    else:
                        p[call.from_user.id] += f'‚Ä¢ <b>{y[call.from_user.id][0][0]} - {float(chance[call.from_user.id][a[call.from_user.id]])*100}% \n</b>'

                if not i[call.from_user.id][5] is None:
                    chance[call.from_user.id] = i[call.from_user.id][6].split()
                    what_chance[call.from_user.id] = i[call.from_user.id][5].split()
                    
                    for a[call.from_user.id] in range(len(chance[call.from_user.id])):
                        if int(float(chance[call.from_user.id][a[call.from_user.id]])*100) == float(chance[call.from_user.id][a[call.from_user.id]])*100:
                            p[call.from_user.id] += f'‚Ä¢ <b>–û—Ç {what_chance[call.from_user.id][a[call.from_user.id]].split("-")[0]} –¥–æ {what_chance[call.from_user.id][a[call.from_user.id]].split("-")[1]} –∫–æ–∏–Ω–æ–≤ - {int(float(chance[call.from_user.id][a[call.from_user.id]])*100)}% \n</b>'
                        else:
                            p[call.from_user.id] += f'‚Ä¢ <b>–û—Ç {what_chance[call.from_user.id][a[call.from_user.id]].split("-")[0]} –¥–æ {what_chance[call.from_user.id][a[call.from_user.id]].split("-")[1]} –∫–æ–∏–Ω–æ–≤ - {float(chance[call.from_user.id][a[call.from_user.id]])*100}% \n</b>'

                if not i[call.from_user.id][8] is None:
                    chance[call.from_user.id] = i[call.from_user.id][8].split()
                    what_chance[call.from_user.id] = i[call.from_user.id][7].split()
                    
                    for a[call.from_user.id] in range(len(chance[call.from_user.id])):
                        if int(float(chance[call.from_user.id][a[call.from_user.id]])*100) == float(chance[call.from_user.id][a[call.from_user.id]])*100:
                            p[call.from_user.id] += f'‚Ä¢ <b>–û—Ç {what_chance[call.from_user.id][a[call.from_user.id]].split("+")[0]} –¥–æ {what_chance[call.from_user.id][a[call.from_user.id]].split("+")[1]} –∫—Ä–µ–¥–∏—Ç–æ–≤ - {int(float(chance[call.from_user.id][a[call.from_user.id]])*100)}% \n</b>'
                        else:
                            p[call.from_user.id] += f'‚Ä¢ <b>–û—Ç {what_chance[call.from_user.id][a[call.from_user.id]].split("+")[0]} –¥–æ {what_chance[call.from_user.id][a[call.from_user.id]].split("+")[1]} –∫—Ä–µ–¥–∏—Ç–æ–≤ - {float(chance[call.from_user.id][a[call.from_user.id]])*100}% \n</b>'

                if not i[call.from_user.id][3] is None:
                        charactselect =  types.InlineKeyboardButton('–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ üìú', callback_data=str(call.from_user.id)+i[call.from_user.id][0]+'charactselect')
                        murkup.add(opene, charactselect, back, cancel)
                else:
                    murkup.add(opene, back, cancel)

                bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.id, text = f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–µ–π—Å?ü§î \n<b>{i[call.from_user.id][1]}</b> \n \n<i>–®–∞–Ω—Å—ã –≤—ã–ø–∞–¥–µ–Ω–∏—è:</i> \n{p[call.from_user.id]}', parse_mode='html', reply_markup=murkup)
                break
        
            elif call.data == str(call.from_user.id)+i[call.from_user.id][0]+'charactselect':
                opene = types.InlineKeyboardButton('–û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å‚úÖ', callback_data=str(call.from_user.id)+i[call.from_user.id][0]+'caseopen')
                backch = types.InlineKeyboardButton('–ù–∞–∑–∞–¥ –∫ —à–∞–Ω—Å–∞–º‚óÄ', callback_data=str(call.from_user.id)+i[call.from_user.id][0]+'caseselect')
                back = types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è', callback_data=str(call.from_user.id)+'startcases')
                cancel = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞‚ùå', callback_data=str(call.from_user.id)+'cancelcase')

                all_car_tags[call.from_user.id] = i[call.from_user.id][3].split()
                p[call.from_user.id] = ''
                for a[call.from_user.id] in all_car_tags[call.from_user.id]:
                    cursor.execute(f'''select car_name, min_step, max_step, kef_coin from car_balance
                    where car_tag = "{a[call.from_user.id]}"''')
                    y[call.from_user.id] = cursor.fetchall()
                    p[call.from_user.id] += f'<b>{y[call.from_user.id][0][0]}</b> \n \n<i>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</i> \n1. –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥: <b>{y[call.from_user.id][0][1]}</b> \n2. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥: <b>{y[call.from_user.id][0][2]}</b> \n3. –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ–∏–Ω–æ–≤: <b>{y[call.from_user.id][0][3]}</b> \n \n'

                murkup.add(opene, backch, back, cancel)
                bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.id, text = f'<i>–í—Å–µ –º–∞—à–∏–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–ø–∞—Å—Ç—å —Å –∫–µ–π—Å–∞ üß∞</i> \n \n{p[call.from_user.id]}', parse_mode='html', reply_markup=murkup)
                break

            elif call.data == str(call.from_user.id)+i[call.from_user.id][0]+'caseopen':
                cursor.execute(f'''select all_user_cases, all_user_cars, user_balance, donation_valute from user_data
                where user_id = {call.from_user.id}''')
                y[call.from_user.id] = cursor.fetchall()

                all_case_tags[call.from_user.id] = y[call.from_user.id][0][0].split()

                reopene = types.InlineKeyboardButton('–û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å –µ—â–µ —Ä–∞–∑ ‚úÖ', callback_data=str(call.from_user.id)+i[call.from_user.id][0]+'casereopen')

                chance[call.from_user.id] = []
                what_chance[call.from_user.id] = []
                if not i[call.from_user.id][3] is None:
                    chance[call.from_user.id] += i[call.from_user.id][4].split()
                    what_chance[call.from_user.id] += i[call.from_user.id][3].split()

                if not i[call.from_user.id][5] is None:
                    chance[call.from_user.id] += i[call.from_user.id][6].split()
                    what_chance[call.from_user.id] += i[call.from_user.id][5].split()

                if not i[call.from_user.id][8] is None:
                    chance[call.from_user.id] += i[call.from_user.id][8].split()
                    what_chance[call.from_user.id] += i[call.from_user.id][7].split()
                
                chance[call.from_user.id] = list(accumulate([float (a[call.from_user.id]) for a[call.from_user.id] in chance[call.from_user.id]]))
                opencase[call.from_user.id] = bisect(chance[call.from_user.id], random())

                b[call.from_user.id] = 0
                for a[call.from_user.id] in all_case_tags[call.from_user.id]:
                    if i[call.from_user.id][0] in a[call.from_user.id]:
                        case_kol[call.from_user.id] = a[call.from_user.id].split('+')[1]
                        case_kol[call.from_user.id] = int(case_kol[call.from_user.id])
                        all_case_tags[call.from_user.id].remove(a[call.from_user.id])

                        if case_kol[call.from_user.id]-1 > 0:
                            all_case_tags[call.from_user.id].append(i[call.from_user.id][0]+'+'+str(case_kol[call.from_user.id]-1))

                        cursor.execute(f'''update user_data
                        set all_user_cases = "{' '.join(all_case_tags[call.from_user.id])}"
                        where user_id = {call.from_user.id}''')
                        connection.commit()
                        b[call.from_user.id] = 1
                        break

                if b[call.from_user.id] == 0:
                    bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.id, text = f'<i>–£ –≤–∞—Å —É–∂–µ –Ω–µ—Ç –∫–µ–π—Å–æ–≤ üö´</i>', parse_mode='html', reply_markup=murkup)
                    break
                
                if '-' in what_chance[call.from_user.id][opencase[call.from_user.id]]:
                    casedrop[call.from_user.id] = randint(int(what_chance[call.from_user.id][opencase[call.from_user.id]].split("-")[0]), int(what_chance[call.from_user.id][opencase[call.from_user.id]].split("-")[1]))
                    casedrop[call.from_user.id] = int(casedrop[call.from_user.id])
                    
                    cursor.execute(f'''update user_data
                    set user_balance = {y[call.from_user.id][0][2] + casedrop[call.from_user.id]}
                    where user_id = {call.from_user.id}''')
                    connection.commit()

                    if casedrop[call.from_user.id] == 1:
                        a[call.from_user.id] = '–≤—ã–ø–∞–ª'
                    else:
                        a[call.from_user.id] = '–≤—ã–ø–∞–ª–æ'

                    p[call.from_user.id] = f'<i>–í–∞–º {a[call.from_user.id]} <b>{casedrop[call.from_user.id]}</b> {cointo(casedrop[call.from_user.id])}</i>'
                    cursor.execute(f'insert into logs(first_name, username, user_id, chat_id, time, command, logs) values("{call.from_user.first_name}", "{call.from_user.username}", {call.from_user.id}, NULL, "{datetime.now()}", "opencase", "take {casedrop[call.from_user.id]} c")')
                    connection.commit()

                elif '+' in what_chance[call.from_user.id][opencase[call.from_user.id]]:
                    casedrop[call.from_user.id] = randint(int(what_chance[call.from_user.id][opencase[call.from_user.id]].split("+")[0]), int(what_chance[call.from_user.id][opencase[call.from_user.id]].split("+")[1]))
                    casedrop[call.from_user.id] = int(casedrop[call.from_user.id])

                    cursor.execute(f'''update user_data
                    set donation_valute = {y[call.from_user.id][0][3] + casedrop[call.from_user.id]}
                    where user_id = {call.from_user.id}''')
                    connection.commit()

                    if casedrop[call.from_user.id] == 1:
                        a[call.from_user.id] = '–≤—ã–ø–∞–ª'
                    else:
                        a[call.from_user.id] = '–≤—ã–ø–∞–ª–æ'

                    p[call.from_user.id] = f'<i>–í–∞–º {a[call.from_user.id]} <b>{casedrop[call.from_user.id]}</b> {creditto(casedrop[call.from_user.id])} üíù</i>'

                    cursor.execute(f'insert into logs(first_name, username, user_id, chat_id, time, command, logs) values("{call.from_user.first_name}", "{call.from_user.username}", {call.from_user.id}, NULL, "{datetime.now()}", "opencase", "take {casedrop[call.from_user.id]} v")')
                    connection.commit()
                else:
                    casedrop[call.from_user.id] = what_chance[call.from_user.id][opencase[call.from_user.id]]

                    cursor.execute(f'''select car_name, cost, check_exclusive from car_balance
                    where car_tag = "{casedrop[call.from_user.id]}"''')
                    z[call.from_user.id] = cursor.fetchall()


                    if casedrop[call.from_user.id] in y[call.from_user.id][0][1]:

                        if z[call.from_user.id][0][2] == 3 or z[call.from_user.id][0][2] == 4:
                            cursor.execute(f'''update user_data
                            set donation_valute = {y[call.from_user.id][0][3] + z[call.from_user.id][0][1]}
                            where user_id = {call.from_user.id}''')
                            connection.commit()

                            p[call.from_user.id] = f'<i>–í–∞–º –≤—ã–ø–∞–ª–æ –∞–≤—Ç–æ <b>{z[call.from_user.id][0][0]}</b>, –Ω–æ –æ–Ω–æ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å \n–í—ã –ø–æ–ª—É—á–∏—Ç–µ {z[call.from_user.id][0][1]} {creditto(z[call.from_user.id][0][1])} üíù</i>'
                        else:
                            cursor.execute(f'''update user_data
                            set user_balance = {y[call.from_user.id][0][2] + round(z[call.from_user.id][0][1]*0.75)}
                            where user_id = {call.from_user.id}''')
                            connection.commit()

                            p[call.from_user.id] = f'<i>–í–∞–º –≤—ã–ø–∞–ª–æ –∞–≤—Ç–æ <b>{z[call.from_user.id][0][0]}</b>, –Ω–æ –æ–Ω–æ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å \n–í—ã –ø–æ–ª—É—á–∏—Ç–µ {round(z[call.from_user.id][0][1]*0.75)} {cointo(round(z[call.from_user.id][0][1]*0.75))} üíù</i>'
                    else:
                        cursor.execute(f'''update user_data
                        set all_user_cars = "{y[call.from_user.id][0][1]+' '+casedrop[call.from_user.id]}"
                        where user_id = {call.from_user.id}''')
                        connection.commit()

                        p[call.from_user.id] = f'<i>–í–∞–º –≤—ã–ø–∞–ª–æ –∞–≤—Ç–æ <b>{z[call.from_user.id][0][0]}</b></i>'

                    cursor.execute(f'insert into logs(first_name, username, user_id, chat_id, time, command, logs) values("{call.from_user.first_name}", "{call.from_user.username}", {call.from_user.id}, NULL, "{datetime.now()}", "opencase", "take {casedrop[call.from_user.id]}")')
                    connection.commit()

                if case_kol[call.from_user.id]-1 > 0:
                    murkup.add(reopene)

                bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.id, text = f'<i><u>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</u>\n{p[call.from_user.id]} \n \n–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {case_kol[call.from_user.id]-1} {caseto(case_kol[call.from_user.id]-1)} üíù</i>', parse_mode='html', reply_markup=murkup)
                break
            
            elif call.data == str(call.from_user.id)+i[call.from_user.id][0]+'casereopen':
                cursor.execute(f'''select all_user_cases, all_user_cars, user_balance, donation_valute from user_data
                where user_id = {call.from_user.id}''')
                y[call.from_user.id] = cursor.fetchall()

                all_case_tags[call.from_user.id] = y[call.from_user.id][0][0].split()

                reopene = types.InlineKeyboardButton('–û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å –µ—â–µ —Ä–∞–∑ ‚úÖ', callback_data=str(call.from_user.id)+i[call.from_user.id][0]+'casereopen')

                chance[call.from_user.id] = []
                what_chance[call.from_user.id] = []
                if not i[call.from_user.id][3] is None:
                    chance[call.from_user.id] += i[call.from_user.id][4].split()
                    what_chance[call.from_user.id] += i[call.from_user.id][3].split()

                if not i[call.from_user.id][5] is None:
                    chance[call.from_user.id] += i[call.from_user.id][6].split()
                    what_chance[call.from_user.id] += i[call.from_user.id][5].split()

                if not i[call.from_user.id][8] is None:
                    chance[call.from_user.id] += i[call.from_user.id][8].split()
                    what_chance[call.from_user.id] += i[call.from_user.id][7].split()
                
                chance[call.from_user.id] = list(accumulate([float (a[call.from_user.id]) for a[call.from_user.id] in chance[call.from_user.id]]))
                opencase[call.from_user.id] = bisect(chance[call.from_user.id], random())
                
                b[call.from_user.id] = 0
                for a[call.from_user.id] in all_case_tags[call.from_user.id]:
                    if i[call.from_user.id][0] in a[call.from_user.id]:
                        case_kol[call.from_user.id] = a[call.from_user.id].split('+')[1]
                        case_kol[call.from_user.id] = int(case_kol[call.from_user.id])
                        all_case_tags[call.from_user.id].remove(a[call.from_user.id])

                        if case_kol[call.from_user.id]-1 > 0:
                            all_case_tags[call.from_user.id].append(i[call.from_user.id][0]+'+'+str(case_kol[call.from_user.id]-1))

                        cursor.execute(f'''update user_data
                        set all_user_cases = "{' '.join(all_case_tags[call.from_user.id])}"
                        where user_id = {call.from_user.id}''')
                        connection.commit()
                        b[call.from_user.id] = 1
                        break

                if b[call.from_user.id] == 0:
                    bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.id, text = f'<i>–£ –≤–∞—Å —É–∂–µ –Ω–µ—Ç –∫–µ–π—Å–æ–≤ üö´</i>', parse_mode='html', reply_markup=murkup)
                    break
                
                if '-' in what_chance[call.from_user.id][opencase[call.from_user.id]]:
                    casedrop[call.from_user.id] = randint(int(what_chance[call.from_user.id][opencase[call.from_user.id]].split("-")[0]), int(what_chance[call.from_user.id][opencase[call.from_user.id]].split("-")[1]))
                    casedrop[call.from_user.id] = int(casedrop[call.from_user.id])
                    
                    cursor.execute(f'''update user_data
                    set user_balance = {y[call.from_user.id][0][2] + casedrop[call.from_user.id]}
                    where user_id = {call.from_user.id}''')
                    connection.commit()

                    if casedrop[call.from_user.id] == 1:
                        a[call.from_user.id] = '–≤—ã–ø–∞–ª'
                    else:
                        a[call.from_user.id] = '–≤—ã–ø–∞–ª–æ'

                    p[call.from_user.id] = f'<i>–í–∞–º {a[call.from_user.id]} <b>{casedrop[call.from_user.id]}</b> {cointo(casedrop[call.from_user.id])}</i>'
                    cursor.execute(f'insert into logs(first_name, username, user_id, chat_id, time, command, logs) values("{call.from_user.first_name}", "{call.from_user.username}", {call.from_user.id}, NULL, "{datetime.now()}", "opencase", "take {casedrop[call.from_user.id]} c")')
                    connection.commit()

                elif '+' in what_chance[call.from_user.id][opencase[call.from_user.id]]:
                    casedrop[call.from_user.id] = randint(int(what_chance[call.from_user.id][opencase[call.from_user.id]].split("+")[0]), int(what_chance[call.from_user.id][opencase[call.from_user.id]].split("+")[1]))
                    casedrop[call.from_user.id] = int(casedrop[call.from_user.id])

                    cursor.execute(f'''update user_data
                    set donation_valute = {y[call.from_user.id][0][3] + casedrop[call.from_user.id]}
                    where user_id = {call.from_user.id}''')
                    connection.commit()

                    if casedrop[call.from_user.id] == 1:
                        a[call.from_user.id] = '–≤—ã–ø–∞–ª'
                    else:
                        a[call.from_user.id] = '–≤—ã–ø–∞–ª–æ'

                    p[call.from_user.id] = f'<i>–í–∞–º {a[call.from_user.id]} <b>{casedrop[call.from_user.id]}</b> {creditto(casedrop[call.from_user.id])}</i>'

                    cursor.execute(f'insert into logs(first_name, username, user_id, chat_id, time, command, logs) values("{call.from_user.first_name}", "{call.from_user.username}", {call.from_user.id}, NULL, "{datetime.now()}", "opencase", "take {casedrop[call.from_user.id]} v")')
                    connection.commit()
                else:
                    casedrop[call.from_user.id] = what_chance[call.from_user.id][opencase[call.from_user.id]]

                    cursor.execute(f'''select car_name, cost, check_exclusive from car_balance
                    where car_tag = "{casedrop[call.from_user.id]}"''')
                    z[call.from_user.id] = cursor.fetchall()


                    if casedrop[call.from_user.id] in y[call.from_user.id][0][1]:

                        if z[call.from_user.id][0][2] == 3 or z[call.from_user.id][0][2] == 4:
                            cursor.execute(f'''update user_data
                            set donation_valute = {y[call.from_user.id][0][2] + z[call.from_user.id][0][1]}
                            where user_id = {call.from_user.id}''')
                            connection.commit()

                            p[call.from_user.id] = f'<i>–í–∞–º –≤—ã–ø–∞–ª–æ –∞–≤—Ç–æ <b>{z[call.from_user.id][0][0]}</b>, –Ω–æ –æ–Ω–æ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å \n–í—ã –ø–æ–ª—É—á–∏—Ç–µ {z[call.from_user.id][0][1]} {creditto(z[call.from_user.id][0][1])} üíù</i>'
                        else:
                            cursor.execute(f'''update user_data
                            set user_balance = {y[call.from_user.id][0][2] + round(z[call.from_user.id][0][1]*0.75)}
                            where user_id = {call.from_user.id}''')
                            connection.commit()

                            p[call.from_user.id] = f'<i>–í–∞–º –≤—ã–ø–∞–ª–æ –∞–≤—Ç–æ <b>{z[call.from_user.id][0][0]}</b>, –Ω–æ –æ–Ω–æ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å \n–í—ã –ø–æ–ª—É—á–∏—Ç–µ {round(z[call.from_user.id][0][1]*0.75)} {cointo(round(z[call.from_user.id][0][1]*0.75))} üíù</i>'
                    else:
                        cursor.execute(f'''update user_data
                        set all_user_cars = "{y[call.from_user.id][0][1]+' '+casedrop[call.from_user.id]}"
                        where user_id = {call.from_user.id}''')
                        connection.commit()

                        p[call.from_user.id] = f'<i>–í–∞–º –≤—ã–ø–∞–ª–æ –∞–≤—Ç–æ <b>{z[call.from_user.id][0][0]}</b></i> üíù'

                    cursor.execute(f'insert into logs(first_name, username, user_id, chat_id, time, command, logs) values("{call.from_user.first_name}", "{call.from_user.username}", {call.from_user.id}, NULL, "{datetime.now()}", "opencase", "take {casedrop[call.from_user.id]}")')
                    connection.commit()

                if case_kol[call.from_user.id]-1 > 0:
                    murkup.add(reopene)

                bot.delete_message(chat_id = call.message.chat.id, message_id = call.message.id)
                bot.send_message(call.message.chat.id, f'<i><u>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</u> \n \n{p[call.from_user.id]} \n \n–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {case_kol[call.from_user.id]-1} {caseto(case_kol[call.from_user.id]-1)}</i>', parse_mode='html', reply_markup=murkup)
                break


        cursor.execute('select car_tag from car_balance')
        x[call.from_user.id] = cursor.fetchall()

        for i[call.from_user.id] in range(len(x[call.from_user.id])):
            if call.data == str(call.from_user.id)+x[call.from_user.id][i[call.from_user.id]][0]+'garage':
                cursor.execute(f'''update user_data
                set user_using_car = "{x[call.from_user.id][i[call.from_user.id]][0]}"
                where user_id = {call.from_user.id}''')
                connection.commit()

                cursor.execute(f'''select car_name from car_balance
                where car_tag = "{x[call.from_user.id][i[call.from_user.id]][0]}"''')
                y[call.from_user.id] = cursor.fetchall()

                if y[call.from_user.id][0][0] == '–ù–æ–≥–∏':
                    p[call.from_user.id] = '<i>–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –Ω–∞ <b>–Ω–æ–≥–∞—Ö</b></i> ‚úÖ'
                else:
                    p[call.from_user.id] = f'<i>–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–µ—Ö–∞–ª–∏ –Ω–∞ <b>{y[call.from_user.id][0][0]}</b></i> ‚úÖ'

                cursor.execute(f'''select min_step, max_step, kef_coin from car_balance
                where car_name = "{y[call.from_user.id][0][0]}"''')
                z[call.from_user.id] = cursor.fetchall()

                bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.id, text = f'{p[call.from_user.id]} \n \n<i>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ:</i> \n1. –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥: <b>{z[call.from_user.id][0][0]}</b> \n2. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥: <b>{z[call.from_user.id][0][1]}</b> \n3. –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ–∏–Ω–æ–≤: <b>{z[call.from_user.id][0][2]}</b>', parse_mode='html')
                break

            elif call.data == str(call.from_user.id)+x[call.from_user.id][i[call.from_user.id]][0]+'shop':
                buy = types.InlineKeyboardButton('–ö—É–ø–∏—Ç—å –∞–≤—Ç–æ‚úÖ', callback_data=str(call.from_user.id)+x[call.from_user.id][i[call.from_user.id]][0]+'buy')
                back = types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è', callback_data=str(call.from_user.id)+'carssshop')
                cancel = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞‚ùå', callback_data=str(call.from_user.id)+'cancelshop')
                cursor.execute(f'''select car_name, cost, min_step, max_step, kef_coin from car_balance
                where car_tag = "{x[call.from_user.id][i[call.from_user.id]][0]}"''')
                y[call.from_user.id] = cursor.fetchall()

                murkup.add(buy, back, cancel)
                bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.id, text = f'<u>–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å –∞–≤—Ç–æ?</u>ü§î <b>{y[call.from_user.id][0][0]}</b> \n \n<i>–¶–µ–Ω–∞:</i> <b>{y[call.from_user.id][0][1]}üè∑</b> \n \n<i>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ:</i> \n1. –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥: <b>{y[call.from_user.id][0][2]}</b> \n2. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥: <b>{y[call.from_user.id][0][3]}</b> \n3. –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ–∏–Ω–æ–≤: <b>{y[call.from_user.id][0][4]}</b>', parse_mode='html', reply_markup=murkup)
                break

            elif call.data == str(call.from_user.id)+x[call.from_user.id][i[call.from_user.id]][0]+'buy':
                cursor.execute(f'''select car_name, cost from car_balance
                where car_tag = "{x[call.from_user.id][i[call.from_user.id]][0]}"''')
                y[call.from_user.id] = cursor.fetchall()

                cursor.execute(f'''select all_user_cars, user_balance from user_data
                where user_id = {call.from_user.id}''')
                z[call.from_user.id] = cursor.fetchall()

                if x[call.from_user.id][i[call.from_user.id]][0] in z[call.from_user.id][0][0]:
                    bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.id, text = f'–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–≤—Ç–æ <b>{y[call.from_user.id][0][0]}‚úÖ</b>', parse_mode='html')
                    break

                if y[call.from_user.id][0][1] <= z[call.from_user.id][0][1]:
                    cursor.execute(f'''update user_data
                    set all_user_cars = "{z[call.from_user.id][0][0] + ' ' + x[call.from_user.id][i[call.from_user.id]][0]}",
                    user_balance = {z[call.from_user.id][0][1] - y[call.from_user.id][0][1]}
                    where user_id = {call.from_user.id}''')
                    connection.commit()

                    buy_car[call.from_user] = f'''<u>–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ –∞–≤—Ç–æ</u> <i>{y[call.from_user.id][0][0]}</i> ü§ë
                    \n<i>–í—ã–±–µ—Ä–µ—Ç–µ –Ω–æ–≤–æ–µ –∞–≤—Ç–æ –≤ –≥–∞—Ä–∞–∂–µ</i> üèò
                    \n<i>–í–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç <b>{z[call.from_user.id][0][1] - y[call.from_user.id][0][1]}</b> {cointo(z[call.from_user.id][0][1] - y[call.from_user.id][0][1])}</i> üí∞'''

                    cursor.execute(f'insert into logs(first_name, username, user_id, chat_id, time, command, logs) values("{call.from_user.first_name}", "{call.from_user.username}", {call.from_user.id}, NULL, "{datetime.now()}", "buy", "take {x[call.from_user.id][i[call.from_user.id]][0]}")')
                    connection.commit()
                else:
                    buy_car[call.from_user] = f'''–í–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –Ω–∞ –ø–æ–∫—É–ø–∫—É ü§°<i>
                    \n{y[call.from_user.id][0][0]}</i> <b>{y[call.from_user.id][0][1] - z[call.from_user.id][0][1]}</b> {cointo(y[call.from_user.id][0][1] - z[call.from_user.id][0][1])}'''

                bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.id, text = buy_car[call.from_user], parse_mode='html')
                break
                
            elif call.data == str(call.from_user.id)+x[call.from_user.id][i[call.from_user.id]][0]+'dump':

                dump = types.InlineKeyboardButton('–°–¥–∞—Ç—å –∞–≤—Ç–æ –Ω–∞ —Å–≤–∞–ª–∫—É ‚úÖ', callback_data=str(call.from_user.id)+x[call.from_user.id][i[call.from_user.id]][0]+'sliv')
                back = types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è', callback_data=str(call.from_user.id)+'startdump')
                cancel = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞‚ùå', callback_data=str(call.from_user.id)+'canceldump')

                cursor.execute(f'''select car_name, cost, min_step, max_step, kef_coin from car_balance
                where car_tag = "{x[call.from_user.id][i[call.from_user.id]][0]}"''')
                y[call.from_user.id] = cursor.fetchall()

                murkup.add(dump, back, cancel)

                bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.id, text = f'<u>–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–∞—Ç—å –∞–≤—Ç–æ –Ω–∞ —Å–≤–∞–ª–∫—É?</u>ü§î <b>{y[call.from_user.id][0][0]}</b> \n \n<i>–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏:</i> <b>{y[call.from_user.id][0][1]}üè∑</b> \n<i>–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏:</i> <b>{round(y[call.from_user.id][0][1]*0.75)}üè∑</b> \n \n<i>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ:</i> \n1. –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥: <b>{y[call.from_user.id][0][2]}</b> \n2. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥: <b>{y[call.from_user.id][0][3]}</b> \n3. –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ–∏–Ω–æ–≤: <b>{y[call.from_user.id][0][4]}</b>', parse_mode='html', reply_markup=murkup)
                break

            elif call.data == str(call.from_user.id)+x[call.from_user.id][i[call.from_user.id]][0]+'sliv':
                cursor.execute(f'''select car_name, cost from car_balance
                where car_tag = "{x[call.from_user.id][i[call.from_user.id]][0]}"''')
                y[call.from_user.id] = cursor.fetchall()
                
                cursor.execute(f'''select all_user_cars, user_using_car, user_balance from user_data
                where user_id = {call.from_user.id}''')
                z[call.from_user.id] = cursor.fetchall()

                all_car_tags[call.from_user.id] = z[call.from_user.id][0][0].split()

                if not x[call.from_user.id][i[call.from_user.id]][0] in all_car_tags[call.from_user.id]:
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text=f'–ê–≤—Ç–æ <b>{y[call.from_user.id][0][0]}</b> —É–∂–µ –≤–∞–º –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—ÇüòÖ', parse_mode= 'html')
                    break
                else:
                    all_car_tags[call.from_user.id].remove(x[call.from_user.id][i[call.from_user.id]][0])
                
                cursor.execute(f'''update user_data
                set user_balance = {z[call.from_user.id][0][2] + round(y[call.from_user.id][0][1]*0.75)},
                all_user_cars = "{' '.join(all_car_tags[call.from_user.id])}"
                where user_id = {call.from_user.id}''')
                connection.commit()


                if z[call.from_user.id][0][1] == x[call.from_user.id][i[call.from_user.id]][0]:
                    cursor.execute(f'''update user_data
                    set user_using_car = "legs"
                    where user_id = {call.from_user.id}''')
                    connection.commit()

                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text=f'–ê–≤—Ç–æ <b>{y[call.from_user.id][0][0]}</b> —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å –Ω–∞ —Å–≤–∞–ª–∫—É üóë \n \n–í—ã <u>–ø–æ–ª—É—á–∏–ª–∏</u> <b>{round(y[call.from_user.id][0][1]*0.75)}</b> {cointo(round(y[call.from_user.id][0][1]*0.75))} ‚òÄÔ∏è \n \n<i>–í–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç <b>{z[call.from_user.id][0][2] + round(y[call.from_user.id][0][1]*0.75)}</b> {cointo(z[call.from_user.id][0][2] + round(y[call.from_user.id][0][1]*0.75))}</i> üí∞', parse_mode= 'html')

                cursor.execute(f'insert into logs(first_name, username, user_id, chat_id, time, command, logs) values("{call.from_user.first_name}", "{call.from_user.username}", {call.from_user.id}, NULL, "{datetime.now()}", "sliv", "lose {x[call.from_user.id][i[call.from_user.id]][0]}")')
                connection.commit()
                break

    except:
        connection.commit()
        
    lock.release()

n = ''
# n = input('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: ')
# n = '''<b>KmDriveBot</b>
# <b>RELEASE VERSION 1.0 üòà</b>

# <b>JUST TRY IT ü•± </b>

# <b>–ü–†–û–°–¢–û –ü–û–ü–†–û–ë–£–ô –≠–¢–ûü•∂</b>

# <b>GOOD LUCK‚ù§ </b>'''
#n = '<u>change log:</u> <i>–ò—Å–ø—Ä–∞–≤–ª–µ–Ω –±–∞–≥ —Å –Ω–µ–∑–∞—á—Ç–µ–Ω–∏–µ–º –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∏–Ω—É—Å–æ–≤—ã—Ö –ø–æ–µ–∑–¥–æ–∫</i>'
#n ='–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /feedback, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å —Å–≤–æ–∏ –∏–¥–µ–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º'
# n ='<b>–ö–æ–º–ø–µ–Ω–∞—Ü–∏–∏ –Ω–µ –±—É–¥–µ—Ç</b>'
# n = '''<b>–í—Å—Ç—Ä–µ—á–∞–π—Ç–µ –Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ KmDriveBot</b> üëãüèª 

# <b><u>–ù–æ–≤–∞—è –∏–≥—Ä–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞: –°–≤–∞–ª–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π</u></b> üö´
# <i>- —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ, —Å–¥–∞—Ç—å –Ω–∞ —Å–≤–∞–ª–∫—É –Ω–µ–Ω—É–∂–Ω—ã–π –≤–∞–º –∞–≤—Ç–æ, –∏ –ø–æ–ª—É—á–∏—Ç—å –∑–∞ –Ω–µ–≥–æ 75% –æ—Ç –µ–≥–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏</i>
# <i>- –æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π /cardump</i>

# <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–∞</b> üöõ

# üáØüáµ  <u>–Ø–ø–æ–Ω—Å–∫–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ —É–∂–µ –º–µ—á—Ç–∞—é—Ç –æ–∫–∞–∑–∞—Ç—å—Å—è –≤ —Ä—É–∫–∞—Ö —É –Ω–∞—Å—Ç–æ—è—â–∏—Ö —Ü–µ–Ω–∏—Ç–µ–ª–µ–π</u>
# <i>- Mitsubishi Lancer Evolution VI</i>
# <i>- Mitsubishi Lancer Evolution IX</i>
# <i>- Toyota Mark II</i>

# üá©üá™  <u> –ù–µ–º–µ—Ü–∫–∏–µ –∞–≤—Ç–æ —Å–ª–∞–≤—è—Ç—Å—è —Å–≤–æ–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º, –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å </u>
# <i>- Mercedes-Benz A45 </i>
# <i>- Mercedes-Benz AMG CLS</i>

# üá∫üá∏ <u> –õ—é–±–∏—Ç–µ–ª–∏ —ç—Ç–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è, –±—É–¥–µ–º –Ω–∞–¥–µ–µ—Ç—Å—è –Ω–∞–π–¥—É—Ç—Å—è  </u> 
# <i>- Ford Mustang GT </i>

# <b>–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ KmDriveBot</b>'''
# n = '—Ç–µ—Å—Ç'
# n = '''<b>–í—Å—Ç—Ä–µ—á–∞–π—Ç–µ –Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ KmDriveBot BETA 1.0.2</b> üëãüèª

# <b><u>–ù–æ–≤–∞—è –∏–≥—Ä–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞: –ü—Ä–æ–º–æ–∫–æ–¥—ã </u></b> üö´
# <i>- —Å —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞, —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –¥–∞–µ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –º–∞—à–∏–Ω—É –∏–ª–∏ –≤–∞–ª—é—Ç—É</i>
# <i>- –ø—Ä–æ–º–æ–∫–æ–¥—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –≤ –≥—Ä—É–ø–ø—ã –∏ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –Ω–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π, —É–¥–∞—á–∏!</i>
# <i>- –æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π /promo_–ø—Ä–æ–º–æ–∫–æ–¥ </i>

# <b>–ù–æ–≤—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏</b> üöõ

# üá∑üá∫ <u>–î–∞–Ω–Ω–æ–µ –∞–≤—Ç–æ —É–∂–µ –∂–¥–µ—Ç —Å–≤–æ–∏—Ö —Å—á–∞—Å—Ç–ª–∏–≤—ã—Ö –æ–±–ª–∞–¥–∞—Ç–µ–ª–µ–π ü§´ </u>
# <i>- –£–ê–ó "–ë—É—Ö–∞–Ω–∫–∞"</i>


# üá©üá™  <u>–ü—Ä–æ–≤–µ—Ä–∏–ª–∏ —É–∂–µ –∫–∞—á–µ—Å—Ç–≤–æ? </u>
# <i>- Audi RS6 </i>


# <b>–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ KmDriveBot</b>
# <u>Coming Soon Release </u>''
# n = '''<u> –£–≤–∞–∂–∞–µ–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ KmDriveBot ‚õî </u>

# <b>–°–ö–û–†–û: –ù–æ–≤—ã–π –≤–∞–ª—é—Ç–∞‚ùó</b>

# <i>–°–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è –Ω–æ–≤–∞—è –∏–≥—Ä–æ–≤–∞—è –≤–∞–ª—é—Ç–∞, –∏ —É –Ω–∞—Å –≤–æ–∑–Ω–∏–∫ –≤–æ–ø—Ä–æ—Å, –∫–∞–∫ –µ–µ –Ω–∞–∑–≤–∞—Ç—å. –ú—ã —Ö–æ—Ç–∏–º —Å–ø—Ä–æ—Å–∏—Ç—å —ç—Ç–æ —É –Ω–∞—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤! </i> 

# <u>–ù–∞–ø–∏—à–∏—Ç–µ –≤ /feedback —Å–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —ç—Ç–æ–º—É –ø–æ–≤–æ–¥—É. –°–∞–º–æ–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏ –ª—É—á—à–µ–µ –º—ã –≤–æ–∑—å–º–µ–º, –∞ —Ç–∞–∫–∂–µ –¥–∞–¥–∏–º <b>–í–û–ó–ù–ê–ì–†–ê–ñ–î–ï–ù–ò–ï</b>  ‚úÖ</u>

# <i>–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ KmDriveBot</i>

# <b>–° —É–≤–∞–∂–µ–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ KmDriveBot</b>'''
# n ='''<u>–£–≤–∞–∂–∞–µ–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ KmDriveBot ‚õî</u>

# <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤—Å–µ—Ö —Å –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–º –¥–Ω–µ–º —á–∏—Å–ª–∞ ¬´–ü–∏¬ª üî¢</b>

# <i>–í —á–µ—Å—Ç—å —ç—Ç–æ–≥–æ –≤–≤–æ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ /promo_3. 6 —Ü–∏—Ñ—Ä —á–∏—Å–ª–∞ "–ü–∏" –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏‚ù§Ô∏è</i> 

# <i>–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ KmDriveBot</i>


# <b>–° —É–≤–∞–∂–µ–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ KmDriveBot ‚úÖ</b>'''

# n = '<b>–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>, –ø–æ—Ä–∞ –ø—Ä–æ—â–∞—Ç—å—Å—è —Å–æ —Å–≤–æ–∏–º–∏ –º–∞—à–∏–Ω–∞–º–∏'

# n = '''<b>KmDriveBot RELEASE VERSION 1.0</b> 

# <u>–£–≤–∞–∂–∞–µ–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ KmDriveBot‚õî</u>

# <i><b>–°–ø—É—Å—Ç—è <u>–¥–æ–ª–≥–∏–µ –º–µ—Å—è—Ü–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏</u>, –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞, –≥–æ—Ç–æ–≤–∞ –≤—ã–ª–æ–∂–∏—Ç—å –≤—Å–µ –∫–∞—Ä—Ç—ã –Ω–∞ —Å—Ç–æ–ª. –í—Å—Ç—Ä–µ—á–∞–π—Ç–µ –Ω–æ–≤–æ–µ <u>–ì–õ–û–ë–ê–õ–¨–ù–û–ï</u> –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ KmDriveBot</b></i> üèéÔ∏èüí®

# ‚Ä¢ <i><b>–ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ üìä</b></i> 

# <i>–ü–æ—Å–æ–≤–µ—Ç–æ–≤–∞–≤—à–∏—Å—å <u>—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</u>, –º—ã –ø—Ä–∏—à–ª–∏ –∫ –≤—ã–≤–æ–¥—É, —á—Ç–æ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è <u>–ß–ï–°–¢–ù–û–ì–û —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</u> KmDriveBot –Ω–µ–æ–±—Ö–æ–¥–∏–º <u>–ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –∏–≥—Ä–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</u>. –ù–û –Ω–µ —Å—Ç–æ–∏—Ç —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞—Ç—å—Å—è –≤–µ–¥—å, –∑–∞ –ø—Ä–æ—à–ª—ã–π –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å, –Ω–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç, –±—É–¥–µ—Ç –∏–ª–∏ —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∞ –î–û–ù–ê–¢ - –í–ê–õ–Æ–¢–ê. –ï–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ –ø—Ä—è–º—É—é –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–≥–æ –≤–∞–º–∏ –ø—É—Ç–∏ –≤ BETA –≤–µ—Ä—Å–∏–∏ KmDriveBot.</i>

# <i><b>‚Ä¢ –ü–æ–ª–Ω–æ—Å—Ç—å—é <u>–∏–∑–º–µ–Ω–µ–Ω–Ω–∞—è</u> —Å–∏—Å—Ç–µ–º–∞ /drive</b></i> üî•

# <i>C –Ω–æ–≤—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ø–æ—è–≤–∏–ª–æ—Å—å –∫–∞—Å—Ç–æ–º–Ω–æ–µ –ö–î –ø–æ–µ–∑–¥–∫–∏ –Ω–∞ –º–∞—à–∏–Ω–µ</i>
# <i>‚Ä¢ –ú–∞—à–∏–Ω–∞ —Å –æ–±—ã—á–Ω–æ–≥–æ –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–∞ - 3 —á–∞—Å–∞</i>
# <i>‚Ä¢ –ú–∞—à–∏–Ω–∞ —Å –¥–æ–Ω–∞—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ - 2 —á–∞—Å–∞</i>
# <i>‚Ä¢ –ú–∞—à–∏–Ω–∞ –Ω–∞ –ø—É—Ç–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π - 6 —á–∞—Å–æ–≤</i>

# <i><b>‚Ä¢ –ü—É—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π /trophyroad </b></i> üèÜ

# <i>–ù–∞ –∑–∞–º–µ–Ω—É <u>—ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º –∞–≤—Ç–æ</u>, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –ø–æ–ª—É—á–∞–ª–∏ –∑–∞ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π –ø—É—Ç—å, –ø—Ä–∏—à–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è. –¢–µ–ø–µ—Ä—å –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ <u>–ø–æ –ù–ê–°–¢–û–Ø–©–ï–ú–£</u> —Ä–µ–¥–∫–∏–µ –∞–≤—Ç–æ, –∫ —Ç–æ–º—É –∂–µ, –≤ –¥–æ–±–∞–≤–æ–∫ –∫—Ä–µ–¥–∏—Ç—ã(–Ω–æ–≤–∞—è –¥–æ–Ω–∞—Ç-–≤–∞–ª—é—Ç–∞), –∏ –∫–µ–π—Å—ã</i>
# <i>–≠—Ç–æ –Ω–æ–≤–æ–≤–≤–µ–¥–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ <u>–ø—Ä–∏–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å</u> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é –≤—Å–µ –±–æ–ª—å—à–∏—Ö –≤—ã—Å–æ—Ç</i>

# <i><b>‚Ä¢ –ö–µ–π—Å—ã</b></i> üß∞

# <i>–ú–Ω–æ–≥–∏–µ –∂–¥–∞–ª–∏, –º–Ω–æ–≥–∏–µ –ø—Ä–æ—Å–∏–ª–∏, –∫–µ–π—Å—ã - –Ω–æ–≤–∞—è –∏–≥—Ä–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞</i>
# <i>–ó–∞—Ö–æ–¥–∏ –≤ /shop, –≤—ã–±–∏—Ä–∞–π –∫–µ–π—Å—ã, –ø–æ–∫—É–ø–∞–π, –∏ –∏—Å–ø—ã—Ç—ã–≤–∞–π —Å–≤–æ—é —É–¥–∞—á—É. –ü–æ–≤–µ—Ä—å, –µ—Å—Ç—å –¥–∞–∂–µ –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã</i>

# <i><b>‚Ä¢ –ù–æ–≤—ã–µ –º–∞—à–∏–Ω—ã</b></i> üöó

# <i>–ö–∞–∂–¥–∞—è –º–∞—à–∏–Ω–∞ —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç —Å–≤–æ–π –∫–ª–∞—Å—Å, –∫ —Ç–æ–º—É –∂–µ –∏—Ö —Å—Ç–∞–ª–æ –ì–û–†–ê–ó–î–û –±–æ–ª—å—à–µ. –ó–∞—Ö–æ–¥–∏ –≤ /shop –∏ –æ—Ü–µ–Ω–∏, –º–æ–∂–µ—Ç —á—Ç–æ-—Ç–æ –∏ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è –∏–∑ –Ω–æ–≤–∏–Ω–æ–∫</i>

# <i><b>‚Ä¢ –ü–æ—è–≤–ª–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ–Ω–∞—Ç–∞</b></i> üí∏

# <i>–ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏, –º—ã —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞ <u>–ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ò–°–ö–õ–Æ–ß–ò–¢–ï–õ–¨–ù–û –¥–ª—è –ü–û–î–î–ï–†–ñ–ê–ù–ò–Ø —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∞</u></i>

# <i><b>‚Ä¢ –ù–æ–≤–∞—è –≤–∞–ª—é—Ç–∞ –∏ –º–∞–≥–∞–∑–∏–Ω</b></i> ‚ù§Ô∏è‚Äçüî•

# <i>–° –ø–æ—è–≤–ª–µ–Ω–∏–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç, –º—ã –¥–æ–±–∞–≤–ª—è–µ–º <u>–Ω–æ–≤—É—é –≤–∞–ª—é—Ç—É(–∫—Ä–µ–¥–∏—Ç—ã)</u>,–∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–∞–∫–∂–µ –∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ (/trophyroad).  –ë—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω /store, –≤ –Ω–µ–º –ø–æ—è–≤–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –õ–£–ß–®–ò–ï –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∑–∞ –∫—Ä–µ–¥–∏—Ç—ã</i>

# <i><b>‚Ä¢ –û –ø—Ä–æ–µ–∫—Ç–µ</b></i> üìï

# <i>–ö–æ–º–∞–Ω–¥–∞ /aboutus –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞, –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã <u>–≤—ã —É–∑–Ω–∞–ª–∏</u> —á—É—Ç—å –±–æ–ª—å—à–µ –æ KmDriveBot</i>

# <i><b>‚Ä¢ –°—Ç–∏–∫–µ—Ä—ã KmDriveBot</b></i> üßª

# <i>C –≤—ã—Ö–æ–¥–æ–º <u>–ì–õ–û–ë–ê–õ–¨–ù–û–ì–û –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</u>, –º—ã —Ä–µ—à–∏–ª–∏ –ø–æ–¥–æ–π—Ç–∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ –∫ –Ω–µ–∫–æ—Ç–æ—Ä—ã–º –∞—Å–ø–µ–∫—Ç–∞–º. –¢–µ–ø–µ—Ä—å –≤—ã—Ä–∞–∂–∞—Ç—å —Å–≤–æ–∏ —ç–º–æ—Ü–∏–∏, –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –∏–ª–∏ –Ω–µ –æ—á–µ–Ω—å, —Å—Ç–∞–ª–æ –≥–æ—Ä–∞–∑–¥–æ –ø—Ä–æ—â–µ /stickers</i>

# <i><b>‚Ä¢ –ú–µ–ª–∫–∏–µ –¥–æ—Ä–∞–±–æ—Ç–∫–∏ üîß</b></i>
# <i>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ /help</i>
# <i>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ /start</i>
# <i>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ /commands</i>
# <i>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ /autopark, —Ç–µ–ø–µ—Ä—å –≤—ã–±–∏—Ä–∞—Ç—å –∞–≤—Ç–æ —Å—Ç–∞–Ω–µ—Ç –ø—Ä–æ—â–µ. –ü–æ—è–≤–∏–ª–∞—Å—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∏–¥—ã –∞–≤—Ç–æ</i>

# <i>–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã —Å–º–µ–ª–æ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ /feedback –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üí¨</i>

# <u>–° —É–≤–∞–∂–µ–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ KmDriveBot ü§ñ</u>

# '''
# n = '''<u><b> –£–≤–∞–∂–∞–µ–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ KmDriveBot</b></u> ‚õî

# <b>–ù–µ–¥–∞–≤–Ω–æ, –º—ã –¥–æ—Å—Ç–∏–≥–ª–∏ "–∫—Ä—É–≥–ª–æ–≥–æ" —á–∏—Å–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ‚úÖ</b>

# <i>–°–ø–∞—Å–∏–±–æ –≤—Å–µ–º –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É ü§ù</i>

# <i>–í —á–µ—Å—Ç—å —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ ‚ù§Ô∏è</i>

# <i>–ü—Ä–æ–º–æ–∫–æ–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º üí¨</i>

# <span class="tg-spoiler">                       /promo_uAPZHF* </span>

# –í–º–µ—Å—Ç–æ –∑–≤–µ–∑–¥–æ—á–∫–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å <b>–º–∞–ª–µ–Ω—å–∫—É—é –ª–∞—Ç–∏–Ω—Å–∫—É—é –±—É–∫–≤—É</b>'''
# n = '''<u><b> –£–≤–∞–∂–∞–µ–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ KmDriveBot </b></u>‚õî

# <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤—Å–µ—Ö —Å –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º 1 –∞–ø—Ä–µ–ª—è‚úÖ</b>

# <i> –í—Å—Ç—Ä–µ—á–∞–π—Ç–µ 2 –ª–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–µ–π—Å–∞ —Å <u>–≠–ö–°–ö–õ–Æ–ó–ò–í–ù–´–ú–ò –º–∞—à–∏–Ω–∞–º–∏</u> /shop ‚ö°Ô∏è</i>

# <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ –ø—Ä–∏—è—Ç–Ω—ã–π –±–æ–Ω—É—Å ‚ù§Ô∏è</i>

# <i>–ü—Ä–æ–º–æ–∫–æ–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º üí¨</i>
#                  <span class="tg-spoiler"> /promo_aprilHuracanFree  </span>'''
# n = '''<b> –ù–∞—à–ª–∏ –¥–ª—è –≤–∞—Å –ø–∞—Ä—É <u>–¢–û–ß–ù–û</u> —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–º–æ ‚ù§Ô∏è</b>

# <i>–° –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º ü•≥</i>

# <u>/promo_1aprilfools</u>
# <u>/promo_foolsfirst</u>'''


if n == '' or n == ' ':
    print('–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ')
else:
    cursor.execute('select chat_id from chat_id_data')
    send = cursor.fetchall()
    for g in send:
        try:
            bot.send_message(g[0], n, parse_mode='html')
        except:
            continue
    print('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')

# n = ''
# n = '''–£–¥–∞—á–∏! –ï—Å–ª–∏ —á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª—Å
# /promo_HEDXKf*

# /promo_ikVk*

# /promo_VsEHUeBNn*'''
# if n == '' or n == ' ':
#     print('–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ')
# else:
#     cursor.execute('select chat_id from chat_id_data')
#     send = cursor.fetchall()
#     for g in send:
#         try:
#             bot.send_message(g[0], n, parse_mode='html')
#         except:
#             continue
#     print('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')


bot.polling(non_stop=True)

connection.commit()
connection.close()